// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY BELGIAN ROBOTS.

// WARNING: This file has automatically been generated on Wed, 1 Jul 2020 12:00:25 MDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package al

/*
#cgo pkg-config: openal
#include "AL/al.h"
#include "AL/alc.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"sync"
	"unsafe"
)

// cgoAllocMap stores pointers to C allocated memory for future reference.
type cgoAllocMap struct {
	mux sync.RWMutex
	m   map[unsafe.Pointer]struct{}
}

var cgoAllocsUnknown = new(cgoAllocMap)

func (a *cgoAllocMap) Add(ptr unsafe.Pointer) {
	a.mux.Lock()
	if a.m == nil {
		a.m = make(map[unsafe.Pointer]struct{})
	}
	a.m[ptr] = struct{}{}
	a.mux.Unlock()
}

func (a *cgoAllocMap) IsEmpty() bool {
	a.mux.RLock()
	isEmpty := len(a.m) == 0
	a.mux.RUnlock()
	return isEmpty
}

func (a *cgoAllocMap) Borrow(b *cgoAllocMap) {
	if b == nil || b.IsEmpty() {
		return
	}
	b.mux.Lock()
	a.mux.Lock()
	for ptr := range b.m {
		if a.m == nil {
			a.m = make(map[unsafe.Pointer]struct{})
		}
		a.m[ptr] = struct{}{}
		delete(b.m, ptr)
	}
	a.mux.Unlock()
	b.mux.Unlock()
}

func (a *cgoAllocMap) Free() {
	a.mux.Lock()
	for ptr := range a.m {
		C.free(ptr)
		delete(a.m, ptr)
	}
	a.mux.Unlock()
}

func (x LPALENABLE) PassRef() (ref *C.LPALENABLE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALENABLEC158BD47Func == nil {
		lPALENABLEC158BD47Func = x
	}
	return (*C.LPALENABLE)(C.LPALENABLE_c158bd47), nil
}

func (x LPALENABLE) PassValue() (ref C.LPALENABLE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALENABLEC158BD47Func == nil {
		lPALENABLEC158BD47Func = x
	}
	return (C.LPALENABLE)(C.LPALENABLE_c158bd47), nil
}

func NewLPALENABLERef(ref unsafe.Pointer) *LPALENABLE {
	return (*LPALENABLE)(ref)
}

//export lPALENABLEC158BD47
func lPALENABLEC158BD47(ccapability C.ALenum) {
	if lPALENABLEC158BD47Func != nil {
		capabilityc158bd47 := (ALenum)(ccapability)
		lPALENABLEC158BD47Func(capabilityc158bd47)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALENABLEC158BD47Func LPALENABLE

func (x LPALDISABLE) PassRef() (ref *C.LPALDISABLE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDISABLE5476105FFunc == nil {
		lPALDISABLE5476105FFunc = x
	}
	return (*C.LPALDISABLE)(C.LPALDISABLE_5476105f), nil
}

func (x LPALDISABLE) PassValue() (ref C.LPALDISABLE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDISABLE5476105FFunc == nil {
		lPALDISABLE5476105FFunc = x
	}
	return (C.LPALDISABLE)(C.LPALDISABLE_5476105f), nil
}

func NewLPALDISABLERef(ref unsafe.Pointer) *LPALDISABLE {
	return (*LPALDISABLE)(ref)
}

//export lPALDISABLE5476105F
func lPALDISABLE5476105F(ccapability C.ALenum) {
	if lPALDISABLE5476105FFunc != nil {
		capability5476105f := (ALenum)(ccapability)
		lPALDISABLE5476105FFunc(capability5476105f)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALDISABLE5476105FFunc LPALDISABLE

func (x LPALISENABLED) PassRef() (ref *C.LPALISENABLED, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALISENABLEDDC30CE46Func == nil {
		lPALISENABLEDDC30CE46Func = x
	}
	return (*C.LPALISENABLED)(C.LPALISENABLED_dc30ce46), nil
}

func (x LPALISENABLED) PassValue() (ref C.LPALISENABLED, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALISENABLEDDC30CE46Func == nil {
		lPALISENABLEDDC30CE46Func = x
	}
	return (C.LPALISENABLED)(C.LPALISENABLED_dc30ce46), nil
}

func NewLPALISENABLEDRef(ref unsafe.Pointer) *LPALISENABLED {
	return (*LPALISENABLED)(ref)
}

//export lPALISENABLEDDC30CE46
func lPALISENABLEDDC30CE46(ccapability C.ALenum) C.ALboolean {
	if lPALISENABLEDDC30CE46Func != nil {
		capabilitydc30ce46 := (ALenum)(ccapability)
		retdc30ce46 := lPALISENABLEDDC30CE46Func(capabilitydc30ce46)
		ret, _ := (C.ALboolean)(retdc30ce46), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALISENABLEDDC30CE46Func LPALISENABLED

type sliceHeader struct {
	Data unsafe.Pointer
	Len  int
	Cap  int
}

// allocALcharMemory allocates memory for type C.ALchar in C.
// The caller is responsible for freeing the this memory via C.free.
func allocALcharMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfALcharValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfALcharValue = unsafe.Sizeof([1]C.ALchar{})

const sizeOfPtr = unsafe.Sizeof(&struct{}{})

// unpackArgSALchar transforms a sliced Go data structure into plain C format.
func unpackArgSALchar(x []ALchar) (unpacked *C.ALchar, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(&unpacked, func(**C.ALchar) {
		go allocs.Free()
	})

	len0 := len(x)
	mem0 := allocALcharMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.ALchar)(unsafe.Pointer(h0))
	// for i0 := range x {
	// 	allocs0 := new(cgoAllocMap)
	// 	// v0[i0], allocs0 = x[i0].PassValue()
	// 	allocs.Borrow(allocs0)
	// }
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.ALchar)(h.Data)
	return
}


func (x LPALGETSTRING) PassRef() (ref *C.LPALGETSTRING, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSTRING54E8AEB0Func == nil {
		lPALGETSTRING54E8AEB0Func = x
	}
	return (*C.LPALGETSTRING)(C.LPALGETSTRING_54e8aeb0), nil
}

func (x LPALGETSTRING) PassValue() (ref C.LPALGETSTRING, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSTRING54E8AEB0Func == nil {
		lPALGETSTRING54E8AEB0Func = x
	}
	return (C.LPALGETSTRING)(C.LPALGETSTRING_54e8aeb0), nil
}

func NewLPALGETSTRINGRef(ref unsafe.Pointer) *LPALGETSTRING {
	return (*LPALGETSTRING)(ref)
}

//export lPALGETSTRING54E8AEB0
func lPALGETSTRING54E8AEB0(cparam C.ALenum) *C.ALchar {
	if lPALGETSTRING54E8AEB0Func != nil {
		param54e8aeb0 := (ALenum)(cparam)
		ret54e8aeb0 := lPALGETSTRING54E8AEB0Func(param54e8aeb0)
		var uselessArray []ALchar
		uselessArray[0] = *ret54e8aeb0

		ret, _ := unpackArgSALchar(uselessArray)
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALGETSTRING54E8AEB0Func LPALGETSTRING

func (x LPALGETBOOLEANV) PassRef() (ref *C.LPALGETBOOLEANV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBOOLEANV96C6C0DFunc == nil {
		lPALGETBOOLEANV96C6C0DFunc = x
	}
	return (*C.LPALGETBOOLEANV)(C.LPALGETBOOLEANV_96c6c0d), nil
}

func (x LPALGETBOOLEANV) PassValue() (ref C.LPALGETBOOLEANV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBOOLEANV96C6C0DFunc == nil {
		lPALGETBOOLEANV96C6C0DFunc = x
	}
	return (C.LPALGETBOOLEANV)(C.LPALGETBOOLEANV_96c6c0d), nil
}

func NewLPALGETBOOLEANVRef(ref unsafe.Pointer) *LPALGETBOOLEANV {
	return (*LPALGETBOOLEANV)(ref)
}

//export lPALGETBOOLEANV96C6C0D
func lPALGETBOOLEANV96C6C0D(cparam C.ALenum, cvalues *C.ALboolean) {
	if lPALGETBOOLEANV96C6C0DFunc != nil {
		param96c6c0d := (ALenum)(cparam)
		var values96c6c0d []ALboolean
		hxfc4425b := (*sliceHeader)(unsafe.Pointer(&values96c6c0d))
		hxfc4425b.Data = unsafe.Pointer(cvalues)
		hxfc4425b.Cap = 0x7fffffff
		// hxfc4425b.Len = ?

		lPALGETBOOLEANV96C6C0DFunc(param96c6c0d, values96c6c0d)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETBOOLEANV96C6C0DFunc LPALGETBOOLEANV

func (x LPALGETINTEGERV) PassRef() (ref *C.LPALGETINTEGERV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETINTEGERVDD07D6CCFunc == nil {
		lPALGETINTEGERVDD07D6CCFunc = x
	}
	return (*C.LPALGETINTEGERV)(C.LPALGETINTEGERV_dd07d6cc), nil
}

func (x LPALGETINTEGERV) PassValue() (ref C.LPALGETINTEGERV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETINTEGERVDD07D6CCFunc == nil {
		lPALGETINTEGERVDD07D6CCFunc = x
	}
	return (C.LPALGETINTEGERV)(C.LPALGETINTEGERV_dd07d6cc), nil
}

func NewLPALGETINTEGERVRef(ref unsafe.Pointer) *LPALGETINTEGERV {
	return (*LPALGETINTEGERV)(ref)
}

//export lPALGETINTEGERVDD07D6CC
func lPALGETINTEGERVDD07D6CC(cparam C.ALenum, cvalues *C.ALint) {
	if lPALGETINTEGERVDD07D6CCFunc != nil {
		paramdd07d6cc := (ALenum)(cparam)
		var valuesdd07d6cc []ALint
		hxf95e7c8 := (*sliceHeader)(unsafe.Pointer(&valuesdd07d6cc))
		hxf95e7c8.Data = unsafe.Pointer(cvalues)
		hxf95e7c8.Cap = 0x7fffffff
		// hxf95e7c8.Len = ?

		lPALGETINTEGERVDD07D6CCFunc(paramdd07d6cc, valuesdd07d6cc)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETINTEGERVDD07D6CCFunc LPALGETINTEGERV

func (x LPALGETFLOATV) PassRef() (ref *C.LPALGETFLOATV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETFLOATV219EE508Func == nil {
		lPALGETFLOATV219EE508Func = x
	}
	return (*C.LPALGETFLOATV)(C.LPALGETFLOATV_219ee508), nil
}

func (x LPALGETFLOATV) PassValue() (ref C.LPALGETFLOATV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETFLOATV219EE508Func == nil {
		lPALGETFLOATV219EE508Func = x
	}
	return (C.LPALGETFLOATV)(C.LPALGETFLOATV_219ee508), nil
}

func NewLPALGETFLOATVRef(ref unsafe.Pointer) *LPALGETFLOATV {
	return (*LPALGETFLOATV)(ref)
}

//export lPALGETFLOATV219EE508
func lPALGETFLOATV219EE508(cparam C.ALenum, cvalues *C.ALfloat) {
	if lPALGETFLOATV219EE508Func != nil {
		param219ee508 := (ALenum)(cparam)
		var values219ee508 []ALfloat
		hxff2234b := (*sliceHeader)(unsafe.Pointer(&values219ee508))
		hxff2234b.Data = unsafe.Pointer(cvalues)
		hxff2234b.Cap = 0x7fffffff
		// hxff2234b.Len = ?

		lPALGETFLOATV219EE508Func(param219ee508, values219ee508)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETFLOATV219EE508Func LPALGETFLOATV

func (x LPALGETDOUBLEV) PassRef() (ref *C.LPALGETDOUBLEV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETDOUBLEV4C4FD8BFunc == nil {
		lPALGETDOUBLEV4C4FD8BFunc = x
	}
	return (*C.LPALGETDOUBLEV)(C.LPALGETDOUBLEV_4c4fd8b), nil
}

func (x LPALGETDOUBLEV) PassValue() (ref C.LPALGETDOUBLEV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETDOUBLEV4C4FD8BFunc == nil {
		lPALGETDOUBLEV4C4FD8BFunc = x
	}
	return (C.LPALGETDOUBLEV)(C.LPALGETDOUBLEV_4c4fd8b), nil
}

func NewLPALGETDOUBLEVRef(ref unsafe.Pointer) *LPALGETDOUBLEV {
	return (*LPALGETDOUBLEV)(ref)
}

//export lPALGETDOUBLEV4C4FD8B
func lPALGETDOUBLEV4C4FD8B(cparam C.ALenum, cvalues *C.ALdouble) {
	if lPALGETDOUBLEV4C4FD8BFunc != nil {
		param4c4fd8b := (ALenum)(cparam)
		var values4c4fd8b []ALdouble
		hxff73280 := (*sliceHeader)(unsafe.Pointer(&values4c4fd8b))
		hxff73280.Data = unsafe.Pointer(cvalues)
		hxff73280.Cap = 0x7fffffff
		// hxff73280.Len = ?

		lPALGETDOUBLEV4C4FD8BFunc(param4c4fd8b, values4c4fd8b)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETDOUBLEV4C4FD8BFunc LPALGETDOUBLEV

func (x LPALGETBOOLEAN) PassRef() (ref *C.LPALGETBOOLEAN, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBOOLEAND54A567CFunc == nil {
		lPALGETBOOLEAND54A567CFunc = x
	}
	return (*C.LPALGETBOOLEAN)(C.LPALGETBOOLEAN_d54a567c), nil
}

func (x LPALGETBOOLEAN) PassValue() (ref C.LPALGETBOOLEAN, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBOOLEAND54A567CFunc == nil {
		lPALGETBOOLEAND54A567CFunc = x
	}
	return (C.LPALGETBOOLEAN)(C.LPALGETBOOLEAN_d54a567c), nil
}

func NewLPALGETBOOLEANRef(ref unsafe.Pointer) *LPALGETBOOLEAN {
	return (*LPALGETBOOLEAN)(ref)
}

//export lPALGETBOOLEAND54A567C
func lPALGETBOOLEAND54A567C(cparam C.ALenum) C.ALboolean {
	if lPALGETBOOLEAND54A567CFunc != nil {
		paramd54a567c := (ALenum)(cparam)
		retd54a567c := lPALGETBOOLEAND54A567CFunc(paramd54a567c)
		ret, _ := (C.ALboolean)(retd54a567c), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALGETBOOLEAND54A567CFunc LPALGETBOOLEAN

func (x LPALGETINTEGER) PassRef() (ref *C.LPALGETINTEGER, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETINTEGER5C0751FFunc == nil {
		lPALGETINTEGER5C0751FFunc = x
	}
	return (*C.LPALGETINTEGER)(C.LPALGETINTEGER_5c0751f), nil
}

func (x LPALGETINTEGER) PassValue() (ref C.LPALGETINTEGER, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETINTEGER5C0751FFunc == nil {
		lPALGETINTEGER5C0751FFunc = x
	}
	return (C.LPALGETINTEGER)(C.LPALGETINTEGER_5c0751f), nil
}

func NewLPALGETINTEGERRef(ref unsafe.Pointer) *LPALGETINTEGER {
	return (*LPALGETINTEGER)(ref)
}

//export lPALGETINTEGER5C0751F
func lPALGETINTEGER5C0751F(cparam C.ALenum) C.ALint {
	if lPALGETINTEGER5C0751FFunc != nil {
		param5c0751f := (ALenum)(cparam)
		ret5c0751f := lPALGETINTEGER5C0751FFunc(param5c0751f)
		ret, _ := (C.ALint)(ret5c0751f), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALGETINTEGER5C0751FFunc LPALGETINTEGER

func (x LPALGETFLOAT) PassRef() (ref *C.LPALGETFLOAT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETFLOAT257BCD44Func == nil {
		lPALGETFLOAT257BCD44Func = x
	}
	return (*C.LPALGETFLOAT)(C.LPALGETFLOAT_257bcd44), nil
}

func (x LPALGETFLOAT) PassValue() (ref C.LPALGETFLOAT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETFLOAT257BCD44Func == nil {
		lPALGETFLOAT257BCD44Func = x
	}
	return (C.LPALGETFLOAT)(C.LPALGETFLOAT_257bcd44), nil
}

func NewLPALGETFLOATRef(ref unsafe.Pointer) *LPALGETFLOAT {
	return (*LPALGETFLOAT)(ref)
}

//export lPALGETFLOAT257BCD44
func lPALGETFLOAT257BCD44(cparam C.ALenum) C.ALfloat {
	if lPALGETFLOAT257BCD44Func != nil {
		param257bcd44 := (ALenum)(cparam)
		ret257bcd44 := lPALGETFLOAT257BCD44Func(param257bcd44)
		ret, _ := (C.ALfloat)(ret257bcd44), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALGETFLOAT257BCD44Func LPALGETFLOAT

func (x LPALGETDOUBLE) PassRef() (ref *C.LPALGETDOUBLE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETDOUBLE10B1EEF6Func == nil {
		lPALGETDOUBLE10B1EEF6Func = x
	}
	return (*C.LPALGETDOUBLE)(C.LPALGETDOUBLE_10b1eef6), nil
}

func (x LPALGETDOUBLE) PassValue() (ref C.LPALGETDOUBLE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETDOUBLE10B1EEF6Func == nil {
		lPALGETDOUBLE10B1EEF6Func = x
	}
	return (C.LPALGETDOUBLE)(C.LPALGETDOUBLE_10b1eef6), nil
}

func NewLPALGETDOUBLERef(ref unsafe.Pointer) *LPALGETDOUBLE {
	return (*LPALGETDOUBLE)(ref)
}

//export lPALGETDOUBLE10B1EEF6
func lPALGETDOUBLE10B1EEF6(cparam C.ALenum) C.ALdouble {
	if lPALGETDOUBLE10B1EEF6Func != nil {
		param10b1eef6 := (ALenum)(cparam)
		ret10b1eef6 := lPALGETDOUBLE10B1EEF6Func(param10b1eef6)
		ret, _ := (C.ALdouble)(ret10b1eef6), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALGETDOUBLE10B1EEF6Func LPALGETDOUBLE

func (x LPALGETERROR) PassRef() (ref *C.LPALGETERROR, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETERRORB1032FA0Func == nil {
		lPALGETERRORB1032FA0Func = x
	}
	return (*C.LPALGETERROR)(C.LPALGETERROR_b1032fa0), nil
}

func (x LPALGETERROR) PassValue() (ref C.LPALGETERROR, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETERRORB1032FA0Func == nil {
		lPALGETERRORB1032FA0Func = x
	}
	return (C.LPALGETERROR)(C.LPALGETERROR_b1032fa0), nil
}

func NewLPALGETERRORRef(ref unsafe.Pointer) *LPALGETERROR {
	return (*LPALGETERROR)(ref)
}

//export lPALGETERRORB1032FA0
func lPALGETERRORB1032FA0() C.ALenum {
	if lPALGETERRORB1032FA0Func != nil {
		retb1032fa0 := lPALGETERRORB1032FA0Func()
		ret, _ := (C.ALenum)(retb1032fa0), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALGETERRORB1032FA0Func LPALGETERROR

// packSALchar reads sliced Go data structure out from plain C format.
func packSALchar(v []ALchar, ptr0 *C.ALchar) {
	// const m = 0x7fffffff
	// for i0 := range v {
	// 	// ptr1 := (*(*[m / sizeOfALcharValue]C.ALchar)(unsafe.Pointer(ptr0)))[i0]
	// 	// v[i0] = *NewALcharRef(unsafe.Pointer(&ptr1))
	// }
}

func (x LPALISEXTENSIONPRESENT) PassRef() (ref *C.LPALISEXTENSIONPRESENT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALISEXTENSIONPRESENT2DE7D519Func == nil {
		lPALISEXTENSIONPRESENT2DE7D519Func = x
	}
	return (*C.LPALISEXTENSIONPRESENT)(C.LPALISEXTENSIONPRESENT_2de7d519), nil
}

func (x LPALISEXTENSIONPRESENT) PassValue() (ref C.LPALISEXTENSIONPRESENT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALISEXTENSIONPRESENT2DE7D519Func == nil {
		lPALISEXTENSIONPRESENT2DE7D519Func = x
	}
	return (C.LPALISEXTENSIONPRESENT)(C.LPALISEXTENSIONPRESENT_2de7d519), nil
}

func NewLPALISEXTENSIONPRESENTRef(ref unsafe.Pointer) *LPALISEXTENSIONPRESENT {
	return (*LPALISEXTENSIONPRESENT)(ref)
}

//export lPALISEXTENSIONPRESENT2DE7D519
func lPALISEXTENSIONPRESENT2DE7D519(cextname *C.ALchar) C.ALboolean {
	if lPALISEXTENSIONPRESENT2DE7D519Func != nil {
		var extname2de7d519 []ALchar
		packSALchar(extname2de7d519, cextname)
		ret2de7d519 := lPALISEXTENSIONPRESENT2DE7D519Func(extname2de7d519)
		ret, _ := (C.ALboolean)(ret2de7d519), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALISEXTENSIONPRESENT2DE7D519Func LPALISEXTENSIONPRESENT

func (x LPALGETPROCADDRESS) PassRef() (ref *C.LPALGETPROCADDRESS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETPROCADDRESSF3CA5DCAFunc == nil {
		lPALGETPROCADDRESSF3CA5DCAFunc = x
	}
	return (*C.LPALGETPROCADDRESS)(C.LPALGETPROCADDRESS_f3ca5dca), nil
}

func (x LPALGETPROCADDRESS) PassValue() (ref C.LPALGETPROCADDRESS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETPROCADDRESSF3CA5DCAFunc == nil {
		lPALGETPROCADDRESSF3CA5DCAFunc = x
	}
	return (C.LPALGETPROCADDRESS)(C.LPALGETPROCADDRESS_f3ca5dca), nil
}

func NewLPALGETPROCADDRESSRef(ref unsafe.Pointer) *LPALGETPROCADDRESS {
	return (*LPALGETPROCADDRESS)(ref)
}

//export lPALGETPROCADDRESSF3CA5DCA
func lPALGETPROCADDRESSF3CA5DCA(cfname *C.ALchar) unsafe.Pointer {
	if lPALGETPROCADDRESSF3CA5DCAFunc != nil {
		var fnamef3ca5dca []ALchar
		packSALchar(fnamef3ca5dca, cfname)
		retf3ca5dca := lPALGETPROCADDRESSF3CA5DCAFunc(fnamef3ca5dca)
		ret, _ := retf3ca5dca, cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALGETPROCADDRESSF3CA5DCAFunc LPALGETPROCADDRESS

func (x LPALGETENUMVALUE) PassRef() (ref *C.LPALGETENUMVALUE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETENUMVALUE5DC5DCEFunc == nil {
		lPALGETENUMVALUE5DC5DCEFunc = x
	}
	return (*C.LPALGETENUMVALUE)(C.LPALGETENUMVALUE_5dc5dce), nil
}

func (x LPALGETENUMVALUE) PassValue() (ref C.LPALGETENUMVALUE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETENUMVALUE5DC5DCEFunc == nil {
		lPALGETENUMVALUE5DC5DCEFunc = x
	}
	return (C.LPALGETENUMVALUE)(C.LPALGETENUMVALUE_5dc5dce), nil
}

func NewLPALGETENUMVALUERef(ref unsafe.Pointer) *LPALGETENUMVALUE {
	return (*LPALGETENUMVALUE)(ref)
}

//export lPALGETENUMVALUE5DC5DCE
func lPALGETENUMVALUE5DC5DCE(cename *C.ALchar) C.ALenum {
	if lPALGETENUMVALUE5DC5DCEFunc != nil {
		var ename5dc5dce []ALchar
		packSALchar(ename5dc5dce, cename)
		ret5dc5dce := lPALGETENUMVALUE5DC5DCEFunc(ename5dc5dce)
		ret, _ := (C.ALenum)(ret5dc5dce), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALGETENUMVALUE5DC5DCEFunc LPALGETENUMVALUE

func (x LPALLISTENERF) PassRef() (ref *C.LPALLISTENERF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENERF8695E9AEFunc == nil {
		lPALLISTENERF8695E9AEFunc = x
	}
	return (*C.LPALLISTENERF)(C.LPALLISTENERF_8695e9ae), nil
}

func (x LPALLISTENERF) PassValue() (ref C.LPALLISTENERF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENERF8695E9AEFunc == nil {
		lPALLISTENERF8695E9AEFunc = x
	}
	return (C.LPALLISTENERF)(C.LPALLISTENERF_8695e9ae), nil
}

func NewLPALLISTENERFRef(ref unsafe.Pointer) *LPALLISTENERF {
	return (*LPALLISTENERF)(ref)
}

//export lPALLISTENERF8695E9AE
func lPALLISTENERF8695E9AE(cparam C.ALenum, cvalue C.ALfloat) {
	if lPALLISTENERF8695E9AEFunc != nil {
		param8695e9ae := (ALenum)(cparam)
		value8695e9ae := (ALfloat)(cvalue)
		lPALLISTENERF8695E9AEFunc(param8695e9ae, value8695e9ae)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALLISTENERF8695E9AEFunc LPALLISTENERF

func (x LPALLISTENER3F) PassRef() (ref *C.LPALLISTENER3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENER3F2E1D9D9DFunc == nil {
		lPALLISTENER3F2E1D9D9DFunc = x
	}
	return (*C.LPALLISTENER3F)(C.LPALLISTENER3F_2e1d9d9d), nil
}

func (x LPALLISTENER3F) PassValue() (ref C.LPALLISTENER3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENER3F2E1D9D9DFunc == nil {
		lPALLISTENER3F2E1D9D9DFunc = x
	}
	return (C.LPALLISTENER3F)(C.LPALLISTENER3F_2e1d9d9d), nil
}

func NewLPALLISTENER3FRef(ref unsafe.Pointer) *LPALLISTENER3F {
	return (*LPALLISTENER3F)(ref)
}

//export lPALLISTENER3F2E1D9D9D
func lPALLISTENER3F2E1D9D9D(cparam C.ALenum, cvalue1 C.ALfloat, cvalue2 C.ALfloat, cvalue3 C.ALfloat) {
	if lPALLISTENER3F2E1D9D9DFunc != nil {
		param2e1d9d9d := (ALenum)(cparam)
		value12e1d9d9d := (ALfloat)(cvalue1)
		value22e1d9d9d := (ALfloat)(cvalue2)
		value32e1d9d9d := (ALfloat)(cvalue3)
		lPALLISTENER3F2E1D9D9DFunc(param2e1d9d9d, value12e1d9d9d, value22e1d9d9d, value32e1d9d9d)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALLISTENER3F2E1D9D9DFunc LPALLISTENER3F

func (x LPALLISTENERFV) PassRef() (ref *C.LPALLISTENERFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENERFV61E2004AFunc == nil {
		lPALLISTENERFV61E2004AFunc = x
	}
	return (*C.LPALLISTENERFV)(C.LPALLISTENERFV_61e2004a), nil
}

func (x LPALLISTENERFV) PassValue() (ref C.LPALLISTENERFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENERFV61E2004AFunc == nil {
		lPALLISTENERFV61E2004AFunc = x
	}
	return (C.LPALLISTENERFV)(C.LPALLISTENERFV_61e2004a), nil
}

func NewLPALLISTENERFVRef(ref unsafe.Pointer) *LPALLISTENERFV {
	return (*LPALLISTENERFV)(ref)
}

//export lPALLISTENERFV61E2004A
func lPALLISTENERFV61E2004A(cparam C.ALenum, cvalues *C.ALfloat) {
	if lPALLISTENERFV61E2004AFunc != nil {
		param61e2004a := (ALenum)(cparam)
		var values61e2004a []ALfloat
		hxfa9955c := (*sliceHeader)(unsafe.Pointer(&values61e2004a))
		hxfa9955c.Data = unsafe.Pointer(cvalues)
		hxfa9955c.Cap = 0x7fffffff
		// hxfa9955c.Len = ?

		lPALLISTENERFV61E2004AFunc(param61e2004a, values61e2004a)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALLISTENERFV61E2004AFunc LPALLISTENERFV

func (x LPALLISTENERI) PassRef() (ref *C.LPALLISTENERI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENERI162AF43FFunc == nil {
		lPALLISTENERI162AF43FFunc = x
	}
	return (*C.LPALLISTENERI)(C.LPALLISTENERI_162af43f), nil
}

func (x LPALLISTENERI) PassValue() (ref C.LPALLISTENERI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENERI162AF43FFunc == nil {
		lPALLISTENERI162AF43FFunc = x
	}
	return (C.LPALLISTENERI)(C.LPALLISTENERI_162af43f), nil
}

func NewLPALLISTENERIRef(ref unsafe.Pointer) *LPALLISTENERI {
	return (*LPALLISTENERI)(ref)
}

//export lPALLISTENERI162AF43F
func lPALLISTENERI162AF43F(cparam C.ALenum, cvalue C.ALint) {
	if lPALLISTENERI162AF43FFunc != nil {
		param162af43f := (ALenum)(cparam)
		value162af43f := (ALint)(cvalue)
		lPALLISTENERI162AF43FFunc(param162af43f, value162af43f)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALLISTENERI162AF43FFunc LPALLISTENERI

func (x LPALLISTENER3I) PassRef() (ref *C.LPALLISTENER3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENER3IBEA2800CFunc == nil {
		lPALLISTENER3IBEA2800CFunc = x
	}
	return (*C.LPALLISTENER3I)(C.LPALLISTENER3I_bea2800c), nil
}

func (x LPALLISTENER3I) PassValue() (ref C.LPALLISTENER3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENER3IBEA2800CFunc == nil {
		lPALLISTENER3IBEA2800CFunc = x
	}
	return (C.LPALLISTENER3I)(C.LPALLISTENER3I_bea2800c), nil
}

func NewLPALLISTENER3IRef(ref unsafe.Pointer) *LPALLISTENER3I {
	return (*LPALLISTENER3I)(ref)
}

//export lPALLISTENER3IBEA2800C
func lPALLISTENER3IBEA2800C(cparam C.ALenum, cvalue1 C.ALint, cvalue2 C.ALint, cvalue3 C.ALint) {
	if lPALLISTENER3IBEA2800CFunc != nil {
		parambea2800c := (ALenum)(cparam)
		value1bea2800c := (ALint)(cvalue1)
		value2bea2800c := (ALint)(cvalue2)
		value3bea2800c := (ALint)(cvalue3)
		lPALLISTENER3IBEA2800CFunc(parambea2800c, value1bea2800c, value2bea2800c, value3bea2800c)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALLISTENER3IBEA2800CFunc LPALLISTENER3I

func (x LPALLISTENERIV) PassRef() (ref *C.LPALLISTENERIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENERIVE67A1C85Func == nil {
		lPALLISTENERIVE67A1C85Func = x
	}
	return (*C.LPALLISTENERIV)(C.LPALLISTENERIV_e67a1c85), nil
}

func (x LPALLISTENERIV) PassValue() (ref C.LPALLISTENERIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALLISTENERIVE67A1C85Func == nil {
		lPALLISTENERIVE67A1C85Func = x
	}
	return (C.LPALLISTENERIV)(C.LPALLISTENERIV_e67a1c85), nil
}

func NewLPALLISTENERIVRef(ref unsafe.Pointer) *LPALLISTENERIV {
	return (*LPALLISTENERIV)(ref)
}

//export lPALLISTENERIVE67A1C85
func lPALLISTENERIVE67A1C85(cparam C.ALenum, cvalues *C.ALint) {
	if lPALLISTENERIVE67A1C85Func != nil {
		parame67a1c85 := (ALenum)(cparam)
		var valuese67a1c85 []ALint
		hxfa3f05c := (*sliceHeader)(unsafe.Pointer(&valuese67a1c85))
		hxfa3f05c.Data = unsafe.Pointer(cvalues)
		hxfa3f05c.Cap = 0x7fffffff
		// hxfa3f05c.Len = ?

		lPALLISTENERIVE67A1C85Func(parame67a1c85, valuese67a1c85)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALLISTENERIVE67A1C85Func LPALLISTENERIV

func (x LPALGETLISTENERF) PassRef() (ref *C.LPALGETLISTENERF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENERF42098513Func == nil {
		lPALGETLISTENERF42098513Func = x
	}
	return (*C.LPALGETLISTENERF)(C.LPALGETLISTENERF_42098513), nil
}

func (x LPALGETLISTENERF) PassValue() (ref C.LPALGETLISTENERF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENERF42098513Func == nil {
		lPALGETLISTENERF42098513Func = x
	}
	return (C.LPALGETLISTENERF)(C.LPALGETLISTENERF_42098513), nil
}

func NewLPALGETLISTENERFRef(ref unsafe.Pointer) *LPALGETLISTENERF {
	return (*LPALGETLISTENERF)(ref)
}

//export lPALGETLISTENERF42098513
func lPALGETLISTENERF42098513(cparam C.ALenum, cvalue *C.ALfloat) {
	if lPALGETLISTENERF42098513Func != nil {
		param42098513 := (ALenum)(cparam)
		var value42098513 []ALfloat
		hxf0d18b7 := (*sliceHeader)(unsafe.Pointer(&value42098513))
		hxf0d18b7.Data = unsafe.Pointer(cvalue)
		hxf0d18b7.Cap = 0x7fffffff
		// hxf0d18b7.Len = ?

		lPALGETLISTENERF42098513Func(param42098513, value42098513)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETLISTENERF42098513Func LPALGETLISTENERF

func (x LPALGETLISTENER3F) PassRef() (ref *C.LPALGETLISTENER3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENER3F9B09CEC0Func == nil {
		lPALGETLISTENER3F9B09CEC0Func = x
	}
	return (*C.LPALGETLISTENER3F)(C.LPALGETLISTENER3F_9b09cec0), nil
}

func (x LPALGETLISTENER3F) PassValue() (ref C.LPALGETLISTENER3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENER3F9B09CEC0Func == nil {
		lPALGETLISTENER3F9B09CEC0Func = x
	}
	return (C.LPALGETLISTENER3F)(C.LPALGETLISTENER3F_9b09cec0), nil
}

func NewLPALGETLISTENER3FRef(ref unsafe.Pointer) *LPALGETLISTENER3F {
	return (*LPALGETLISTENER3F)(ref)
}

//export lPALGETLISTENER3F9B09CEC0
func lPALGETLISTENER3F9B09CEC0(cparam C.ALenum, cvalue1 *C.ALfloat, cvalue2 *C.ALfloat, cvalue3 *C.ALfloat) {
	if lPALGETLISTENER3F9B09CEC0Func != nil {
		param9b09cec0 := (ALenum)(cparam)
		var value19b09cec0 []ALfloat
		hxf2fab0d := (*sliceHeader)(unsafe.Pointer(&value19b09cec0))
		hxf2fab0d.Data = unsafe.Pointer(cvalue1)
		hxf2fab0d.Cap = 0x7fffffff
		// hxf2fab0d.Len = ?

		var value29b09cec0 []ALfloat
		hxf69fe70 := (*sliceHeader)(unsafe.Pointer(&value29b09cec0))
		hxf69fe70.Data = unsafe.Pointer(cvalue2)
		hxf69fe70.Cap = 0x7fffffff
		// hxf69fe70.Len = ?

		var value39b09cec0 []ALfloat
		hxf65bf54 := (*sliceHeader)(unsafe.Pointer(&value39b09cec0))
		hxf65bf54.Data = unsafe.Pointer(cvalue3)
		hxf65bf54.Cap = 0x7fffffff
		// hxf65bf54.Len = ?

		lPALGETLISTENER3F9B09CEC0Func(param9b09cec0, value19b09cec0, value29b09cec0, value39b09cec0)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETLISTENER3F9B09CEC0Func LPALGETLISTENER3F

func (x LPALGETLISTENERFV) PassRef() (ref *C.LPALGETLISTENERFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENERFVD4F65317Func == nil {
		lPALGETLISTENERFVD4F65317Func = x
	}
	return (*C.LPALGETLISTENERFV)(C.LPALGETLISTENERFV_d4f65317), nil
}

func (x LPALGETLISTENERFV) PassValue() (ref C.LPALGETLISTENERFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENERFVD4F65317Func == nil {
		lPALGETLISTENERFVD4F65317Func = x
	}
	return (C.LPALGETLISTENERFV)(C.LPALGETLISTENERFV_d4f65317), nil
}

func NewLPALGETLISTENERFVRef(ref unsafe.Pointer) *LPALGETLISTENERFV {
	return (*LPALGETLISTENERFV)(ref)
}

//export lPALGETLISTENERFVD4F65317
func lPALGETLISTENERFVD4F65317(cparam C.ALenum, cvalues *C.ALfloat) {
	if lPALGETLISTENERFVD4F65317Func != nil {
		paramd4f65317 := (ALenum)(cparam)
		var valuesd4f65317 []ALfloat
		hxf3b8dbd := (*sliceHeader)(unsafe.Pointer(&valuesd4f65317))
		hxf3b8dbd.Data = unsafe.Pointer(cvalues)
		hxf3b8dbd.Cap = 0x7fffffff
		// hxf3b8dbd.Len = ?

		lPALGETLISTENERFVD4F65317Func(paramd4f65317, valuesd4f65317)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETLISTENERFVD4F65317Func LPALGETLISTENERFV

func (x LPALGETLISTENERI) PassRef() (ref *C.LPALGETLISTENERI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENERID2B69882Func == nil {
		lPALGETLISTENERID2B69882Func = x
	}
	return (*C.LPALGETLISTENERI)(C.LPALGETLISTENERI_d2b69882), nil
}

func (x LPALGETLISTENERI) PassValue() (ref C.LPALGETLISTENERI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENERID2B69882Func == nil {
		lPALGETLISTENERID2B69882Func = x
	}
	return (C.LPALGETLISTENERI)(C.LPALGETLISTENERI_d2b69882), nil
}

func NewLPALGETLISTENERIRef(ref unsafe.Pointer) *LPALGETLISTENERI {
	return (*LPALGETLISTENERI)(ref)
}

//export lPALGETLISTENERID2B69882
func lPALGETLISTENERID2B69882(cparam C.ALenum, cvalue *C.ALint) {
	if lPALGETLISTENERID2B69882Func != nil {
		paramd2b69882 := (ALenum)(cparam)
		var valued2b69882 []ALint
		hxf7a6dff := (*sliceHeader)(unsafe.Pointer(&valued2b69882))
		hxf7a6dff.Data = unsafe.Pointer(cvalue)
		hxf7a6dff.Cap = 0x7fffffff
		// hxf7a6dff.Len = ?

		lPALGETLISTENERID2B69882Func(paramd2b69882, valued2b69882)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETLISTENERID2B69882Func LPALGETLISTENERI

func (x LPALGETLISTENER3I) PassRef() (ref *C.LPALGETLISTENER3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENER3IBB6D351Func == nil {
		lPALGETLISTENER3IBB6D351Func = x
	}
	return (*C.LPALGETLISTENER3I)(C.LPALGETLISTENER3I_bb6d351), nil
}

func (x LPALGETLISTENER3I) PassValue() (ref C.LPALGETLISTENER3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENER3IBB6D351Func == nil {
		lPALGETLISTENER3IBB6D351Func = x
	}
	return (C.LPALGETLISTENER3I)(C.LPALGETLISTENER3I_bb6d351), nil
}

func NewLPALGETLISTENER3IRef(ref unsafe.Pointer) *LPALGETLISTENER3I {
	return (*LPALGETLISTENER3I)(ref)
}

//export lPALGETLISTENER3IBB6D351
func lPALGETLISTENER3IBB6D351(cparam C.ALenum, cvalue1 *C.ALint, cvalue2 *C.ALint, cvalue3 *C.ALint) {
	if lPALGETLISTENER3IBB6D351Func != nil {
		parambb6d351 := (ALenum)(cparam)
		var value1bb6d351 []ALint
		hxfe48d67 := (*sliceHeader)(unsafe.Pointer(&value1bb6d351))
		hxfe48d67.Data = unsafe.Pointer(cvalue1)
		hxfe48d67.Cap = 0x7fffffff
		// hxfe48d67.Len = ?

		var value2bb6d351 []ALint
		hxf4171bf := (*sliceHeader)(unsafe.Pointer(&value2bb6d351))
		hxf4171bf.Data = unsafe.Pointer(cvalue2)
		hxf4171bf.Cap = 0x7fffffff
		// hxf4171bf.Len = ?

		var value3bb6d351 []ALint
		hxf058b18 := (*sliceHeader)(unsafe.Pointer(&value3bb6d351))
		hxf058b18.Data = unsafe.Pointer(cvalue3)
		hxf058b18.Cap = 0x7fffffff
		// hxf058b18.Len = ?

		lPALGETLISTENER3IBB6D351Func(parambb6d351, value1bb6d351, value2bb6d351, value3bb6d351)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETLISTENER3IBB6D351Func LPALGETLISTENER3I

func (x LPALGETLISTENERIV) PassRef() (ref *C.LPALGETLISTENERIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENERIV536E4FD8Func == nil {
		lPALGETLISTENERIV536E4FD8Func = x
	}
	return (*C.LPALGETLISTENERIV)(C.LPALGETLISTENERIV_536e4fd8), nil
}

func (x LPALGETLISTENERIV) PassValue() (ref C.LPALGETLISTENERIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETLISTENERIV536E4FD8Func == nil {
		lPALGETLISTENERIV536E4FD8Func = x
	}
	return (C.LPALGETLISTENERIV)(C.LPALGETLISTENERIV_536e4fd8), nil
}

func NewLPALGETLISTENERIVRef(ref unsafe.Pointer) *LPALGETLISTENERIV {
	return (*LPALGETLISTENERIV)(ref)
}

//export lPALGETLISTENERIV536E4FD8
func lPALGETLISTENERIV536E4FD8(cparam C.ALenum, cvalues *C.ALint) {
	if lPALGETLISTENERIV536E4FD8Func != nil {
		param536e4fd8 := (ALenum)(cparam)
		var values536e4fd8 []ALint
		hxff6bc57 := (*sliceHeader)(unsafe.Pointer(&values536e4fd8))
		hxff6bc57.Data = unsafe.Pointer(cvalues)
		hxff6bc57.Cap = 0x7fffffff
		// hxff6bc57.Len = ?

		lPALGETLISTENERIV536E4FD8Func(param536e4fd8, values536e4fd8)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETLISTENERIV536E4FD8Func LPALGETLISTENERIV

func (x LPALGENSOURCES) PassRef() (ref *C.LPALGENSOURCES, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGENSOURCES60E99605Func == nil {
		lPALGENSOURCES60E99605Func = x
	}
	return (*C.LPALGENSOURCES)(C.LPALGENSOURCES_60e99605), nil
}

func (x LPALGENSOURCES) PassValue() (ref C.LPALGENSOURCES, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGENSOURCES60E99605Func == nil {
		lPALGENSOURCES60E99605Func = x
	}
	return (C.LPALGENSOURCES)(C.LPALGENSOURCES_60e99605), nil
}

func NewLPALGENSOURCESRef(ref unsafe.Pointer) *LPALGENSOURCES {
	return (*LPALGENSOURCES)(ref)
}

//export lPALGENSOURCES60E99605
func lPALGENSOURCES60E99605(cn C.ALsizei, csources *C.ALuint) {
	if lPALGENSOURCES60E99605Func != nil {
		n60e99605 := (ALsizei)(cn)
		var sources60e99605 []ALuint
		hxf5fa529 := (*sliceHeader)(unsafe.Pointer(&sources60e99605))
		hxf5fa529.Data = unsafe.Pointer(csources)
		hxf5fa529.Cap = 0x7fffffff
		// hxf5fa529.Len = ?

		lPALGENSOURCES60E99605Func(n60e99605, sources60e99605)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGENSOURCES60E99605Func LPALGENSOURCES

func (x LPALDELETESOURCES) PassRef() (ref *C.LPALDELETESOURCES, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDELETESOURCES9E261641Func == nil {
		lPALDELETESOURCES9E261641Func = x
	}
	return (*C.LPALDELETESOURCES)(C.LPALDELETESOURCES_9e261641), nil
}

func (x LPALDELETESOURCES) PassValue() (ref C.LPALDELETESOURCES, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDELETESOURCES9E261641Func == nil {
		lPALDELETESOURCES9E261641Func = x
	}
	return (C.LPALDELETESOURCES)(C.LPALDELETESOURCES_9e261641), nil
}

func NewLPALDELETESOURCESRef(ref unsafe.Pointer) *LPALDELETESOURCES {
	return (*LPALDELETESOURCES)(ref)
}

//export lPALDELETESOURCES9E261641
func lPALDELETESOURCES9E261641(cn C.ALsizei, csources *C.ALuint) {
	if lPALDELETESOURCES9E261641Func != nil {
		n9e261641 := (ALsizei)(cn)
		var sources9e261641 []ALuint
		hxf21690b := (*sliceHeader)(unsafe.Pointer(&sources9e261641))
		hxf21690b.Data = unsafe.Pointer(csources)
		hxf21690b.Cap = 0x7fffffff
		// hxf21690b.Len = ?

		lPALDELETESOURCES9E261641Func(n9e261641, sources9e261641)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALDELETESOURCES9E261641Func LPALDELETESOURCES

func (x LPALISSOURCE) PassRef() (ref *C.LPALISSOURCE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALISSOURCE45834E0DFunc == nil {
		lPALISSOURCE45834E0DFunc = x
	}
	return (*C.LPALISSOURCE)(C.LPALISSOURCE_45834e0d), nil
}

func (x LPALISSOURCE) PassValue() (ref C.LPALISSOURCE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALISSOURCE45834E0DFunc == nil {
		lPALISSOURCE45834E0DFunc = x
	}
	return (C.LPALISSOURCE)(C.LPALISSOURCE_45834e0d), nil
}

func NewLPALISSOURCERef(ref unsafe.Pointer) *LPALISSOURCE {
	return (*LPALISSOURCE)(ref)
}

//export lPALISSOURCE45834E0D
func lPALISSOURCE45834E0D(csource C.ALuint) C.ALboolean {
	if lPALISSOURCE45834E0DFunc != nil {
		source45834e0d := (ALuint)(csource)
		ret45834e0d := lPALISSOURCE45834E0DFunc(source45834e0d)
		ret, _ := (C.ALboolean)(ret45834e0d), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALISSOURCE45834E0DFunc LPALISSOURCE

func (x LPALSOURCEF) PassRef() (ref *C.LPALSOURCEF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEFA4B3DC17Func == nil {
		lPALSOURCEFA4B3DC17Func = x
	}
	return (*C.LPALSOURCEF)(C.LPALSOURCEF_a4b3dc17), nil
}

func (x LPALSOURCEF) PassValue() (ref C.LPALSOURCEF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEFA4B3DC17Func == nil {
		lPALSOURCEFA4B3DC17Func = x
	}
	return (C.LPALSOURCEF)(C.LPALSOURCEF_a4b3dc17), nil
}

func NewLPALSOURCEFRef(ref unsafe.Pointer) *LPALSOURCEF {
	return (*LPALSOURCEF)(ref)
}

//export lPALSOURCEFA4B3DC17
func lPALSOURCEFA4B3DC17(csource C.ALuint, cparam C.ALenum, cvalue C.ALfloat) {
	if lPALSOURCEFA4B3DC17Func != nil {
		sourcea4b3dc17 := (ALuint)(csource)
		parama4b3dc17 := (ALenum)(cparam)
		valuea4b3dc17 := (ALfloat)(cvalue)
		lPALSOURCEFA4B3DC17Func(sourcea4b3dc17, parama4b3dc17, valuea4b3dc17)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEFA4B3DC17Func LPALSOURCEF

func (x LPALSOURCE3F) PassRef() (ref *C.LPALSOURCE3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCE3F9C82B080Func == nil {
		lPALSOURCE3F9C82B080Func = x
	}
	return (*C.LPALSOURCE3F)(C.LPALSOURCE3F_9c82b080), nil
}

func (x LPALSOURCE3F) PassValue() (ref C.LPALSOURCE3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCE3F9C82B080Func == nil {
		lPALSOURCE3F9C82B080Func = x
	}
	return (C.LPALSOURCE3F)(C.LPALSOURCE3F_9c82b080), nil
}

func NewLPALSOURCE3FRef(ref unsafe.Pointer) *LPALSOURCE3F {
	return (*LPALSOURCE3F)(ref)
}

//export lPALSOURCE3F9C82B080
func lPALSOURCE3F9C82B080(csource C.ALuint, cparam C.ALenum, cvalue1 C.ALfloat, cvalue2 C.ALfloat, cvalue3 C.ALfloat) {
	if lPALSOURCE3F9C82B080Func != nil {
		source9c82b080 := (ALuint)(csource)
		param9c82b080 := (ALenum)(cparam)
		value19c82b080 := (ALfloat)(cvalue1)
		value29c82b080 := (ALfloat)(cvalue2)
		value39c82b080 := (ALfloat)(cvalue3)
		lPALSOURCE3F9C82B080Func(source9c82b080, param9c82b080, value19c82b080, value29c82b080, value39c82b080)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCE3F9C82B080Func LPALSOURCE3F

func (x LPALSOURCEFV) PassRef() (ref *C.LPALSOURCEFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEFVD37D2D57Func == nil {
		lPALSOURCEFVD37D2D57Func = x
	}
	return (*C.LPALSOURCEFV)(C.LPALSOURCEFV_d37d2d57), nil
}

func (x LPALSOURCEFV) PassValue() (ref C.LPALSOURCEFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEFVD37D2D57Func == nil {
		lPALSOURCEFVD37D2D57Func = x
	}
	return (C.LPALSOURCEFV)(C.LPALSOURCEFV_d37d2d57), nil
}

func NewLPALSOURCEFVRef(ref unsafe.Pointer) *LPALSOURCEFV {
	return (*LPALSOURCEFV)(ref)
}

//export lPALSOURCEFVD37D2D57
func lPALSOURCEFVD37D2D57(csource C.ALuint, cparam C.ALenum, cvalues *C.ALfloat) {
	if lPALSOURCEFVD37D2D57Func != nil {
		sourced37d2d57 := (ALuint)(csource)
		paramd37d2d57 := (ALenum)(cparam)
		var valuesd37d2d57 []ALfloat
		hxf1231c9 := (*sliceHeader)(unsafe.Pointer(&valuesd37d2d57))
		hxf1231c9.Data = unsafe.Pointer(cvalues)
		hxf1231c9.Cap = 0x7fffffff
		// hxf1231c9.Len = ?

		lPALSOURCEFVD37D2D57Func(sourced37d2d57, paramd37d2d57, valuesd37d2d57)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEFVD37D2D57Func LPALSOURCEFV

func (x LPALSOURCEI) PassRef() (ref *C.LPALSOURCEI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEI340CC186Func == nil {
		lPALSOURCEI340CC186Func = x
	}
	return (*C.LPALSOURCEI)(C.LPALSOURCEI_340cc186), nil
}

func (x LPALSOURCEI) PassValue() (ref C.LPALSOURCEI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEI340CC186Func == nil {
		lPALSOURCEI340CC186Func = x
	}
	return (C.LPALSOURCEI)(C.LPALSOURCEI_340cc186), nil
}

func NewLPALSOURCEIRef(ref unsafe.Pointer) *LPALSOURCEI {
	return (*LPALSOURCEI)(ref)
}

//export lPALSOURCEI340CC186
func lPALSOURCEI340CC186(csource C.ALuint, cparam C.ALenum, cvalue C.ALint) {
	if lPALSOURCEI340CC186Func != nil {
		source340cc186 := (ALuint)(csource)
		param340cc186 := (ALenum)(cparam)
		value340cc186 := (ALint)(cvalue)
		lPALSOURCEI340CC186Func(source340cc186, param340cc186, value340cc186)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEI340CC186Func LPALSOURCEI

func (x LPALSOURCE3I) PassRef() (ref *C.LPALSOURCE3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCE3IC3DAD11Func == nil {
		lPALSOURCE3IC3DAD11Func = x
	}
	return (*C.LPALSOURCE3I)(C.LPALSOURCE3I_c3dad11), nil
}

func (x LPALSOURCE3I) PassValue() (ref C.LPALSOURCE3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCE3IC3DAD11Func == nil {
		lPALSOURCE3IC3DAD11Func = x
	}
	return (C.LPALSOURCE3I)(C.LPALSOURCE3I_c3dad11), nil
}

func NewLPALSOURCE3IRef(ref unsafe.Pointer) *LPALSOURCE3I {
	return (*LPALSOURCE3I)(ref)
}

//export lPALSOURCE3IC3DAD11
func lPALSOURCE3IC3DAD11(csource C.ALuint, cparam C.ALenum, cvalue1 C.ALint, cvalue2 C.ALint, cvalue3 C.ALint) {
	if lPALSOURCE3IC3DAD11Func != nil {
		sourcec3dad11 := (ALuint)(csource)
		paramc3dad11 := (ALenum)(cparam)
		value1c3dad11 := (ALint)(cvalue1)
		value2c3dad11 := (ALint)(cvalue2)
		value3c3dad11 := (ALint)(cvalue3)
		lPALSOURCE3IC3DAD11Func(sourcec3dad11, paramc3dad11, value1c3dad11, value2c3dad11, value3c3dad11)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCE3IC3DAD11Func LPALSOURCE3I

func (x LPALSOURCEIV) PassRef() (ref *C.LPALSOURCEIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEIV54E53198Func == nil {
		lPALSOURCEIV54E53198Func = x
	}
	return (*C.LPALSOURCEIV)(C.LPALSOURCEIV_54e53198), nil
}

func (x LPALSOURCEIV) PassValue() (ref C.LPALSOURCEIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEIV54E53198Func == nil {
		lPALSOURCEIV54E53198Func = x
	}
	return (C.LPALSOURCEIV)(C.LPALSOURCEIV_54e53198), nil
}

func NewLPALSOURCEIVRef(ref unsafe.Pointer) *LPALSOURCEIV {
	return (*LPALSOURCEIV)(ref)
}

//export lPALSOURCEIV54E53198
func lPALSOURCEIV54E53198(csource C.ALuint, cparam C.ALenum, cvalues *C.ALint) {
	if lPALSOURCEIV54E53198Func != nil {
		source54e53198 := (ALuint)(csource)
		param54e53198 := (ALenum)(cparam)
		var values54e53198 []ALint
		hxf04b15b := (*sliceHeader)(unsafe.Pointer(&values54e53198))
		hxf04b15b.Data = unsafe.Pointer(cvalues)
		hxf04b15b.Cap = 0x7fffffff
		// hxf04b15b.Len = ?

		lPALSOURCEIV54E53198Func(source54e53198, param54e53198, values54e53198)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEIV54E53198Func LPALSOURCEIV

func (x LPALGETSOURCEF) PassRef() (ref *C.LPALGETSOURCEF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCEFE04F5F0DFunc == nil {
		lPALGETSOURCEFE04F5F0DFunc = x
	}
	return (*C.LPALGETSOURCEF)(C.LPALGETSOURCEF_e04f5f0d), nil
}

func (x LPALGETSOURCEF) PassValue() (ref C.LPALGETSOURCEF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCEFE04F5F0DFunc == nil {
		lPALGETSOURCEFE04F5F0DFunc = x
	}
	return (C.LPALGETSOURCEF)(C.LPALGETSOURCEF_e04f5f0d), nil
}

func NewLPALGETSOURCEFRef(ref unsafe.Pointer) *LPALGETSOURCEF {
	return (*LPALGETSOURCEF)(ref)
}

//export lPALGETSOURCEFE04F5F0D
func lPALGETSOURCEFE04F5F0D(csource C.ALuint, cparam C.ALenum, cvalue *C.ALfloat) {
	if lPALGETSOURCEFE04F5F0DFunc != nil {
		sourcee04f5f0d := (ALuint)(csource)
		parame04f5f0d := (ALenum)(cparam)
		var valuee04f5f0d []ALfloat
		hxf2f888b := (*sliceHeader)(unsafe.Pointer(&valuee04f5f0d))
		hxf2f888b.Data = unsafe.Pointer(cvalue)
		hxf2f888b.Cap = 0x7fffffff
		// hxf2f888b.Len = ?

		lPALGETSOURCEFE04F5F0DFunc(sourcee04f5f0d, parame04f5f0d, valuee04f5f0d)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETSOURCEFE04F5F0DFunc LPALGETSOURCEF

func (x LPALGETSOURCE3F) PassRef() (ref *C.LPALGETSOURCE3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCE3F61A4B579Func == nil {
		lPALGETSOURCE3F61A4B579Func = x
	}
	return (*C.LPALGETSOURCE3F)(C.LPALGETSOURCE3F_61a4b579), nil
}

func (x LPALGETSOURCE3F) PassValue() (ref C.LPALGETSOURCE3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCE3F61A4B579Func == nil {
		lPALGETSOURCE3F61A4B579Func = x
	}
	return (C.LPALGETSOURCE3F)(C.LPALGETSOURCE3F_61a4b579), nil
}

func NewLPALGETSOURCE3FRef(ref unsafe.Pointer) *LPALGETSOURCE3F {
	return (*LPALGETSOURCE3F)(ref)
}

//export lPALGETSOURCE3F61A4B579
func lPALGETSOURCE3F61A4B579(csource C.ALuint, cparam C.ALenum, cvalue1 *C.ALfloat, cvalue2 *C.ALfloat, cvalue3 *C.ALfloat) {
	if lPALGETSOURCE3F61A4B579Func != nil {
		source61a4b579 := (ALuint)(csource)
		param61a4b579 := (ALenum)(cparam)
		var value161a4b579 []ALfloat
		hxf5d1de2 := (*sliceHeader)(unsafe.Pointer(&value161a4b579))
		hxf5d1de2.Data = unsafe.Pointer(cvalue1)
		hxf5d1de2.Cap = 0x7fffffff
		// hxf5d1de2.Len = ?

		var value261a4b579 []ALfloat
		hxfe53d34 := (*sliceHeader)(unsafe.Pointer(&value261a4b579))
		hxfe53d34.Data = unsafe.Pointer(cvalue2)
		hxfe53d34.Cap = 0x7fffffff
		// hxfe53d34.Len = ?

		var value361a4b579 []ALfloat
		hxf547023 := (*sliceHeader)(unsafe.Pointer(&value361a4b579))
		hxf547023.Data = unsafe.Pointer(cvalue3)
		hxf547023.Cap = 0x7fffffff
		// hxf547023.Len = ?

		lPALGETSOURCE3F61A4B579Func(source61a4b579, param61a4b579, value161a4b579, value261a4b579, value361a4b579)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETSOURCE3F61A4B579Func LPALGETSOURCE3F

func (x LPALGETSOURCEFV) PassRef() (ref *C.LPALGETSOURCEFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCEFV2E5B28AEFunc == nil {
		lPALGETSOURCEFV2E5B28AEFunc = x
	}
	return (*C.LPALGETSOURCEFV)(C.LPALGETSOURCEFV_2e5b28ae), nil
}

func (x LPALGETSOURCEFV) PassValue() (ref C.LPALGETSOURCEFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCEFV2E5B28AEFunc == nil {
		lPALGETSOURCEFV2E5B28AEFunc = x
	}
	return (C.LPALGETSOURCEFV)(C.LPALGETSOURCEFV_2e5b28ae), nil
}

func NewLPALGETSOURCEFVRef(ref unsafe.Pointer) *LPALGETSOURCEFV {
	return (*LPALGETSOURCEFV)(ref)
}

//export lPALGETSOURCEFV2E5B28AE
func lPALGETSOURCEFV2E5B28AE(csource C.ALuint, cparam C.ALenum, cvalues *C.ALfloat) {
	if lPALGETSOURCEFV2E5B28AEFunc != nil {
		source2e5b28ae := (ALuint)(csource)
		param2e5b28ae := (ALenum)(cparam)
		var values2e5b28ae []ALfloat
		hxf5ebb88 := (*sliceHeader)(unsafe.Pointer(&values2e5b28ae))
		hxf5ebb88.Data = unsafe.Pointer(cvalues)
		hxf5ebb88.Cap = 0x7fffffff
		// hxf5ebb88.Len = ?

		lPALGETSOURCEFV2E5B28AEFunc(source2e5b28ae, param2e5b28ae, values2e5b28ae)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETSOURCEFV2E5B28AEFunc LPALGETSOURCEFV

func (x LPALGETSOURCEI) PassRef() (ref *C.LPALGETSOURCEI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCEI70F0429CFunc == nil {
		lPALGETSOURCEI70F0429CFunc = x
	}
	return (*C.LPALGETSOURCEI)(C.LPALGETSOURCEI_70f0429c), nil
}

func (x LPALGETSOURCEI) PassValue() (ref C.LPALGETSOURCEI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCEI70F0429CFunc == nil {
		lPALGETSOURCEI70F0429CFunc = x
	}
	return (C.LPALGETSOURCEI)(C.LPALGETSOURCEI_70f0429c), nil
}

func NewLPALGETSOURCEIRef(ref unsafe.Pointer) *LPALGETSOURCEI {
	return (*LPALGETSOURCEI)(ref)
}

//export lPALGETSOURCEI70F0429C
func lPALGETSOURCEI70F0429C(csource C.ALuint, cparam C.ALenum, cvalue *C.ALint) {
	if lPALGETSOURCEI70F0429CFunc != nil {
		source70f0429c := (ALuint)(csource)
		param70f0429c := (ALenum)(cparam)
		var value70f0429c []ALint
		hxff20e84 := (*sliceHeader)(unsafe.Pointer(&value70f0429c))
		hxff20e84.Data = unsafe.Pointer(cvalue)
		hxff20e84.Cap = 0x7fffffff
		// hxff20e84.Len = ?

		lPALGETSOURCEI70F0429CFunc(source70f0429c, param70f0429c, value70f0429c)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETSOURCEI70F0429CFunc LPALGETSOURCEI

func (x LPALGETSOURCE3I) PassRef() (ref *C.LPALGETSOURCE3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCE3IF11BA8E8Func == nil {
		lPALGETSOURCE3IF11BA8E8Func = x
	}
	return (*C.LPALGETSOURCE3I)(C.LPALGETSOURCE3I_f11ba8e8), nil
}

func (x LPALGETSOURCE3I) PassValue() (ref C.LPALGETSOURCE3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCE3IF11BA8E8Func == nil {
		lPALGETSOURCE3IF11BA8E8Func = x
	}
	return (C.LPALGETSOURCE3I)(C.LPALGETSOURCE3I_f11ba8e8), nil
}

func NewLPALGETSOURCE3IRef(ref unsafe.Pointer) *LPALGETSOURCE3I {
	return (*LPALGETSOURCE3I)(ref)
}

//export lPALGETSOURCE3IF11BA8E8
func lPALGETSOURCE3IF11BA8E8(csource C.ALuint, cparam C.ALenum, cvalue1 *C.ALint, cvalue2 *C.ALint, cvalue3 *C.ALint) {
	if lPALGETSOURCE3IF11BA8E8Func != nil {
		sourcef11ba8e8 := (ALuint)(csource)
		paramf11ba8e8 := (ALenum)(cparam)
		var value1f11ba8e8 []ALint
		hxfa26a4d := (*sliceHeader)(unsafe.Pointer(&value1f11ba8e8))
		hxfa26a4d.Data = unsafe.Pointer(cvalue1)
		hxfa26a4d.Cap = 0x7fffffff
		// hxfa26a4d.Len = ?

		var value2f11ba8e8 []ALint
		hxfe48098 := (*sliceHeader)(unsafe.Pointer(&value2f11ba8e8))
		hxfe48098.Data = unsafe.Pointer(cvalue2)
		hxfe48098.Cap = 0x7fffffff
		// hxfe48098.Len = ?

		var value3f11ba8e8 []ALint
		hxffe3496 := (*sliceHeader)(unsafe.Pointer(&value3f11ba8e8))
		hxffe3496.Data = unsafe.Pointer(cvalue3)
		hxffe3496.Cap = 0x7fffffff
		// hxffe3496.Len = ?

		lPALGETSOURCE3IF11BA8E8Func(sourcef11ba8e8, paramf11ba8e8, value1f11ba8e8, value2f11ba8e8, value3f11ba8e8)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETSOURCE3IF11BA8E8Func LPALGETSOURCE3I

func (x LPALGETSOURCEIV) PassRef() (ref *C.LPALGETSOURCEIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCEIVA9C33461Func == nil {
		lPALGETSOURCEIVA9C33461Func = x
	}
	return (*C.LPALGETSOURCEIV)(C.LPALGETSOURCEIV_a9c33461), nil
}

func (x LPALGETSOURCEIV) PassValue() (ref C.LPALGETSOURCEIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETSOURCEIVA9C33461Func == nil {
		lPALGETSOURCEIVA9C33461Func = x
	}
	return (C.LPALGETSOURCEIV)(C.LPALGETSOURCEIV_a9c33461), nil
}

func NewLPALGETSOURCEIVRef(ref unsafe.Pointer) *LPALGETSOURCEIV {
	return (*LPALGETSOURCEIV)(ref)
}

//export lPALGETSOURCEIVA9C33461
func lPALGETSOURCEIVA9C33461(csource C.ALuint, cparam C.ALenum, cvalues *C.ALint) {
	if lPALGETSOURCEIVA9C33461Func != nil {
		sourcea9c33461 := (ALuint)(csource)
		parama9c33461 := (ALenum)(cparam)
		var valuesa9c33461 []ALint
		hxf5d48a6 := (*sliceHeader)(unsafe.Pointer(&valuesa9c33461))
		hxf5d48a6.Data = unsafe.Pointer(cvalues)
		hxf5d48a6.Cap = 0x7fffffff
		// hxf5d48a6.Len = ?

		lPALGETSOURCEIVA9C33461Func(sourcea9c33461, parama9c33461, valuesa9c33461)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETSOURCEIVA9C33461Func LPALGETSOURCEIV

func (x LPALSOURCEPLAYV) PassRef() (ref *C.LPALSOURCEPLAYV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEPLAYVD0019668Func == nil {
		lPALSOURCEPLAYVD0019668Func = x
	}
	return (*C.LPALSOURCEPLAYV)(C.LPALSOURCEPLAYV_d0019668), nil
}

func (x LPALSOURCEPLAYV) PassValue() (ref C.LPALSOURCEPLAYV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEPLAYVD0019668Func == nil {
		lPALSOURCEPLAYVD0019668Func = x
	}
	return (C.LPALSOURCEPLAYV)(C.LPALSOURCEPLAYV_d0019668), nil
}

func NewLPALSOURCEPLAYVRef(ref unsafe.Pointer) *LPALSOURCEPLAYV {
	return (*LPALSOURCEPLAYV)(ref)
}

//export lPALSOURCEPLAYVD0019668
func lPALSOURCEPLAYVD0019668(cn C.ALsizei, csources *C.ALuint) {
	if lPALSOURCEPLAYVD0019668Func != nil {
		nd0019668 := (ALsizei)(cn)
		var sourcesd0019668 []ALuint
		hxf685469 := (*sliceHeader)(unsafe.Pointer(&sourcesd0019668))
		hxf685469.Data = unsafe.Pointer(csources)
		hxf685469.Cap = 0x7fffffff
		// hxf685469.Len = ?

		lPALSOURCEPLAYVD0019668Func(nd0019668, sourcesd0019668)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEPLAYVD0019668Func LPALSOURCEPLAYV

func (x LPALSOURCESTOPV) PassRef() (ref *C.LPALSOURCESTOPV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCESTOPVD950058BFunc == nil {
		lPALSOURCESTOPVD950058BFunc = x
	}
	return (*C.LPALSOURCESTOPV)(C.LPALSOURCESTOPV_d950058b), nil
}

func (x LPALSOURCESTOPV) PassValue() (ref C.LPALSOURCESTOPV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCESTOPVD950058BFunc == nil {
		lPALSOURCESTOPVD950058BFunc = x
	}
	return (C.LPALSOURCESTOPV)(C.LPALSOURCESTOPV_d950058b), nil
}

func NewLPALSOURCESTOPVRef(ref unsafe.Pointer) *LPALSOURCESTOPV {
	return (*LPALSOURCESTOPV)(ref)
}

//export lPALSOURCESTOPVD950058B
func lPALSOURCESTOPVD950058B(cn C.ALsizei, csources *C.ALuint) {
	if lPALSOURCESTOPVD950058BFunc != nil {
		nd950058b := (ALsizei)(cn)
		var sourcesd950058b []ALuint
		hxf03a9a7 := (*sliceHeader)(unsafe.Pointer(&sourcesd950058b))
		hxf03a9a7.Data = unsafe.Pointer(csources)
		hxf03a9a7.Cap = 0x7fffffff
		// hxf03a9a7.Len = ?

		lPALSOURCESTOPVD950058BFunc(nd950058b, sourcesd950058b)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCESTOPVD950058BFunc LPALSOURCESTOPV

func (x LPALSOURCEREWINDV) PassRef() (ref *C.LPALSOURCEREWINDV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEREWINDVFE90EC74Func == nil {
		lPALSOURCEREWINDVFE90EC74Func = x
	}
	return (*C.LPALSOURCEREWINDV)(C.LPALSOURCEREWINDV_fe90ec74), nil
}

func (x LPALSOURCEREWINDV) PassValue() (ref C.LPALSOURCEREWINDV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEREWINDVFE90EC74Func == nil {
		lPALSOURCEREWINDVFE90EC74Func = x
	}
	return (C.LPALSOURCEREWINDV)(C.LPALSOURCEREWINDV_fe90ec74), nil
}

func NewLPALSOURCEREWINDVRef(ref unsafe.Pointer) *LPALSOURCEREWINDV {
	return (*LPALSOURCEREWINDV)(ref)
}

//export lPALSOURCEREWINDVFE90EC74
func lPALSOURCEREWINDVFE90EC74(cn C.ALsizei, csources *C.ALuint) {
	if lPALSOURCEREWINDVFE90EC74Func != nil {
		nfe90ec74 := (ALsizei)(cn)
		var sourcesfe90ec74 []ALuint
		hxff24242 := (*sliceHeader)(unsafe.Pointer(&sourcesfe90ec74))
		hxff24242.Data = unsafe.Pointer(csources)
		hxff24242.Cap = 0x7fffffff
		// hxff24242.Len = ?

		lPALSOURCEREWINDVFE90EC74Func(nfe90ec74, sourcesfe90ec74)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEREWINDVFE90EC74Func LPALSOURCEREWINDV

func (x LPALSOURCEPAUSEV) PassRef() (ref *C.LPALSOURCEPAUSEV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEPAUSEV5820338DFunc == nil {
		lPALSOURCEPAUSEV5820338DFunc = x
	}
	return (*C.LPALSOURCEPAUSEV)(C.LPALSOURCEPAUSEV_5820338d), nil
}

func (x LPALSOURCEPAUSEV) PassValue() (ref C.LPALSOURCEPAUSEV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEPAUSEV5820338DFunc == nil {
		lPALSOURCEPAUSEV5820338DFunc = x
	}
	return (C.LPALSOURCEPAUSEV)(C.LPALSOURCEPAUSEV_5820338d), nil
}

func NewLPALSOURCEPAUSEVRef(ref unsafe.Pointer) *LPALSOURCEPAUSEV {
	return (*LPALSOURCEPAUSEV)(ref)
}

//export lPALSOURCEPAUSEV5820338D
func lPALSOURCEPAUSEV5820338D(cn C.ALsizei, csources *C.ALuint) {
	if lPALSOURCEPAUSEV5820338DFunc != nil {
		n5820338d := (ALsizei)(cn)
		var sources5820338d []ALuint
		hxfe93325 := (*sliceHeader)(unsafe.Pointer(&sources5820338d))
		hxfe93325.Data = unsafe.Pointer(csources)
		hxfe93325.Cap = 0x7fffffff
		// hxfe93325.Len = ?

		lPALSOURCEPAUSEV5820338DFunc(n5820338d, sources5820338d)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEPAUSEV5820338DFunc LPALSOURCEPAUSEV

func (x LPALSOURCEPLAY) PassRef() (ref *C.LPALSOURCEPLAY, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEPLAY6EEAEF95Func == nil {
		lPALSOURCEPLAY6EEAEF95Func = x
	}
	return (*C.LPALSOURCEPLAY)(C.LPALSOURCEPLAY_6eeaef95), nil
}

func (x LPALSOURCEPLAY) PassValue() (ref C.LPALSOURCEPLAY, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEPLAY6EEAEF95Func == nil {
		lPALSOURCEPLAY6EEAEF95Func = x
	}
	return (C.LPALSOURCEPLAY)(C.LPALSOURCEPLAY_6eeaef95), nil
}

func NewLPALSOURCEPLAYRef(ref unsafe.Pointer) *LPALSOURCEPLAY {
	return (*LPALSOURCEPLAY)(ref)
}

//export lPALSOURCEPLAY6EEAEF95
func lPALSOURCEPLAY6EEAEF95(csource C.ALuint) {
	if lPALSOURCEPLAY6EEAEF95Func != nil {
		source6eeaef95 := (ALuint)(csource)
		lPALSOURCEPLAY6EEAEF95Func(source6eeaef95)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEPLAY6EEAEF95Func LPALSOURCEPLAY

func (x LPALSOURCESTOP) PassRef() (ref *C.LPALSOURCESTOP, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCESTOP89352799Func == nil {
		lPALSOURCESTOP89352799Func = x
	}
	return (*C.LPALSOURCESTOP)(C.LPALSOURCESTOP_89352799), nil
}

func (x LPALSOURCESTOP) PassValue() (ref C.LPALSOURCESTOP, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCESTOP89352799Func == nil {
		lPALSOURCESTOP89352799Func = x
	}
	return (C.LPALSOURCESTOP)(C.LPALSOURCESTOP_89352799), nil
}

func NewLPALSOURCESTOPRef(ref unsafe.Pointer) *LPALSOURCESTOP {
	return (*LPALSOURCESTOP)(ref)
}

//export lPALSOURCESTOP89352799
func lPALSOURCESTOP89352799(csource C.ALuint) {
	if lPALSOURCESTOP89352799Func != nil {
		source89352799 := (ALuint)(csource)
		lPALSOURCESTOP89352799Func(source89352799)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCESTOP89352799Func LPALSOURCESTOP

func (x LPALSOURCEREWIND) PassRef() (ref *C.LPALSOURCEREWIND, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEREWIND4B9D72E8Func == nil {
		lPALSOURCEREWIND4B9D72E8Func = x
	}
	return (*C.LPALSOURCEREWIND)(C.LPALSOURCEREWIND_4b9d72e8), nil
}

func (x LPALSOURCEREWIND) PassValue() (ref C.LPALSOURCEREWIND, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEREWIND4B9D72E8Func == nil {
		lPALSOURCEREWIND4B9D72E8Func = x
	}
	return (C.LPALSOURCEREWIND)(C.LPALSOURCEREWIND_4b9d72e8), nil
}

func NewLPALSOURCEREWINDRef(ref unsafe.Pointer) *LPALSOURCEREWIND {
	return (*LPALSOURCEREWIND)(ref)
}

//export lPALSOURCEREWIND4B9D72E8
func lPALSOURCEREWIND4B9D72E8(csource C.ALuint) {
	if lPALSOURCEREWIND4B9D72E8Func != nil {
		source4b9d72e8 := (ALuint)(csource)
		lPALSOURCEREWIND4B9D72E8Func(source4b9d72e8)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEREWIND4B9D72E8Func LPALSOURCEREWIND

func (x LPALSOURCEPAUSE) PassRef() (ref *C.LPALSOURCEPAUSE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEPAUSE4715EC4DFunc == nil {
		lPALSOURCEPAUSE4715EC4DFunc = x
	}
	return (*C.LPALSOURCEPAUSE)(C.LPALSOURCEPAUSE_4715ec4d), nil
}

func (x LPALSOURCEPAUSE) PassValue() (ref C.LPALSOURCEPAUSE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEPAUSE4715EC4DFunc == nil {
		lPALSOURCEPAUSE4715EC4DFunc = x
	}
	return (C.LPALSOURCEPAUSE)(C.LPALSOURCEPAUSE_4715ec4d), nil
}

func NewLPALSOURCEPAUSERef(ref unsafe.Pointer) *LPALSOURCEPAUSE {
	return (*LPALSOURCEPAUSE)(ref)
}

//export lPALSOURCEPAUSE4715EC4D
func lPALSOURCEPAUSE4715EC4D(csource C.ALuint) {
	if lPALSOURCEPAUSE4715EC4DFunc != nil {
		source4715ec4d := (ALuint)(csource)
		lPALSOURCEPAUSE4715EC4DFunc(source4715ec4d)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEPAUSE4715EC4DFunc LPALSOURCEPAUSE

func (x LPALSOURCEQUEUEBUFFERS) PassRef() (ref *C.LPALSOURCEQUEUEBUFFERS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEQUEUEBUFFERS4C6E4CA3Func == nil {
		lPALSOURCEQUEUEBUFFERS4C6E4CA3Func = x
	}
	return (*C.LPALSOURCEQUEUEBUFFERS)(C.LPALSOURCEQUEUEBUFFERS_4c6e4ca3), nil
}

func (x LPALSOURCEQUEUEBUFFERS) PassValue() (ref C.LPALSOURCEQUEUEBUFFERS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEQUEUEBUFFERS4C6E4CA3Func == nil {
		lPALSOURCEQUEUEBUFFERS4C6E4CA3Func = x
	}
	return (C.LPALSOURCEQUEUEBUFFERS)(C.LPALSOURCEQUEUEBUFFERS_4c6e4ca3), nil
}

func NewLPALSOURCEQUEUEBUFFERSRef(ref unsafe.Pointer) *LPALSOURCEQUEUEBUFFERS {
	return (*LPALSOURCEQUEUEBUFFERS)(ref)
}

//export lPALSOURCEQUEUEBUFFERS4C6E4CA3
func lPALSOURCEQUEUEBUFFERS4C6E4CA3(csource C.ALuint, cnb C.ALsizei, cbuffers *C.ALuint) {
	if lPALSOURCEQUEUEBUFFERS4C6E4CA3Func != nil {
		source4c6e4ca3 := (ALuint)(csource)
		nb4c6e4ca3 := (ALsizei)(cnb)
		var buffers4c6e4ca3 []ALuint
		hxf09ea94 := (*sliceHeader)(unsafe.Pointer(&buffers4c6e4ca3))
		hxf09ea94.Data = unsafe.Pointer(cbuffers)
		hxf09ea94.Cap = 0x7fffffff
		// hxf09ea94.Len = ?

		lPALSOURCEQUEUEBUFFERS4C6E4CA3Func(source4c6e4ca3, nb4c6e4ca3, buffers4c6e4ca3)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEQUEUEBUFFERS4C6E4CA3Func LPALSOURCEQUEUEBUFFERS

func (x LPALSOURCEUNQUEUEBUFFERS) PassRef() (ref *C.LPALSOURCEUNQUEUEBUFFERS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEUNQUEUEBUFFERSC16DEC16Func == nil {
		lPALSOURCEUNQUEUEBUFFERSC16DEC16Func = x
	}
	return (*C.LPALSOURCEUNQUEUEBUFFERS)(C.LPALSOURCEUNQUEUEBUFFERS_c16dec16), nil
}

func (x LPALSOURCEUNQUEUEBUFFERS) PassValue() (ref C.LPALSOURCEUNQUEUEBUFFERS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSOURCEUNQUEUEBUFFERSC16DEC16Func == nil {
		lPALSOURCEUNQUEUEBUFFERSC16DEC16Func = x
	}
	return (C.LPALSOURCEUNQUEUEBUFFERS)(C.LPALSOURCEUNQUEUEBUFFERS_c16dec16), nil
}

func NewLPALSOURCEUNQUEUEBUFFERSRef(ref unsafe.Pointer) *LPALSOURCEUNQUEUEBUFFERS {
	return (*LPALSOURCEUNQUEUEBUFFERS)(ref)
}

//export lPALSOURCEUNQUEUEBUFFERSC16DEC16
func lPALSOURCEUNQUEUEBUFFERSC16DEC16(csource C.ALuint, cnb C.ALsizei, cbuffers *C.ALuint) {
	if lPALSOURCEUNQUEUEBUFFERSC16DEC16Func != nil {
		sourcec16dec16 := (ALuint)(csource)
		nbc16dec16 := (ALsizei)(cnb)
		var buffersc16dec16 []ALuint
		hxfd687ee := (*sliceHeader)(unsafe.Pointer(&buffersc16dec16))
		hxfd687ee.Data = unsafe.Pointer(cbuffers)
		hxfd687ee.Cap = 0x7fffffff
		// hxfd687ee.Len = ?

		lPALSOURCEUNQUEUEBUFFERSC16DEC16Func(sourcec16dec16, nbc16dec16, buffersc16dec16)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSOURCEUNQUEUEBUFFERSC16DEC16Func LPALSOURCEUNQUEUEBUFFERS

func (x LPALGENBUFFERS) PassRef() (ref *C.LPALGENBUFFERS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGENBUFFERSFA38F53CFunc == nil {
		lPALGENBUFFERSFA38F53CFunc = x
	}
	return (*C.LPALGENBUFFERS)(C.LPALGENBUFFERS_fa38f53c), nil
}

func (x LPALGENBUFFERS) PassValue() (ref C.LPALGENBUFFERS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGENBUFFERSFA38F53CFunc == nil {
		lPALGENBUFFERSFA38F53CFunc = x
	}
	return (C.LPALGENBUFFERS)(C.LPALGENBUFFERS_fa38f53c), nil
}

func NewLPALGENBUFFERSRef(ref unsafe.Pointer) *LPALGENBUFFERS {
	return (*LPALGENBUFFERS)(ref)
}

//export lPALGENBUFFERSFA38F53C
func lPALGENBUFFERSFA38F53C(cn C.ALsizei, cbuffers *C.ALuint) {
	if lPALGENBUFFERSFA38F53CFunc != nil {
		nfa38f53c := (ALsizei)(cn)
		var buffersfa38f53c []ALuint
		hxf15a567 := (*sliceHeader)(unsafe.Pointer(&buffersfa38f53c))
		hxf15a567.Data = unsafe.Pointer(cbuffers)
		hxf15a567.Cap = 0x7fffffff
		// hxf15a567.Len = ?

		lPALGENBUFFERSFA38F53CFunc(nfa38f53c, buffersfa38f53c)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGENBUFFERSFA38F53CFunc LPALGENBUFFERS

func (x LPALDELETEBUFFERS) PassRef() (ref *C.LPALDELETEBUFFERS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDELETEBUFFERS4F77578Func == nil {
		lPALDELETEBUFFERS4F77578Func = x
	}
	return (*C.LPALDELETEBUFFERS)(C.LPALDELETEBUFFERS_4f77578), nil
}

func (x LPALDELETEBUFFERS) PassValue() (ref C.LPALDELETEBUFFERS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDELETEBUFFERS4F77578Func == nil {
		lPALDELETEBUFFERS4F77578Func = x
	}
	return (C.LPALDELETEBUFFERS)(C.LPALDELETEBUFFERS_4f77578), nil
}

func NewLPALDELETEBUFFERSRef(ref unsafe.Pointer) *LPALDELETEBUFFERS {
	return (*LPALDELETEBUFFERS)(ref)
}

//export lPALDELETEBUFFERS4F77578
func lPALDELETEBUFFERS4F77578(cn C.ALsizei, cbuffers *C.ALuint) {
	if lPALDELETEBUFFERS4F77578Func != nil {
		n4f77578 := (ALsizei)(cn)
		var buffers4f77578 []ALuint
		hxf8aebb5 := (*sliceHeader)(unsafe.Pointer(&buffers4f77578))
		hxf8aebb5.Data = unsafe.Pointer(cbuffers)
		hxf8aebb5.Cap = 0x7fffffff
		// hxf8aebb5.Len = ?

		lPALDELETEBUFFERS4F77578Func(n4f77578, buffers4f77578)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALDELETEBUFFERS4F77578Func LPALDELETEBUFFERS

func (x LPALISBUFFER) PassRef() (ref *C.LPALISBUFFER, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALISBUFFER2B53C18CFunc == nil {
		lPALISBUFFER2B53C18CFunc = x
	}
	return (*C.LPALISBUFFER)(C.LPALISBUFFER_2b53c18c), nil
}

func (x LPALISBUFFER) PassValue() (ref C.LPALISBUFFER, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALISBUFFER2B53C18CFunc == nil {
		lPALISBUFFER2B53C18CFunc = x
	}
	return (C.LPALISBUFFER)(C.LPALISBUFFER_2b53c18c), nil
}

func NewLPALISBUFFERRef(ref unsafe.Pointer) *LPALISBUFFER {
	return (*LPALISBUFFER)(ref)
}

//export lPALISBUFFER2B53C18C
func lPALISBUFFER2B53C18C(cbuffer C.ALuint) C.ALboolean {
	if lPALISBUFFER2B53C18CFunc != nil {
		buffer2b53c18c := (ALuint)(cbuffer)
		ret2b53c18c := lPALISBUFFER2B53C18CFunc(buffer2b53c18c)
		ret, _ := (C.ALboolean)(ret2b53c18c), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALISBUFFER2B53C18CFunc LPALISBUFFER

func (x LPALBUFFERDATA) PassRef() (ref *C.LPALBUFFERDATA, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERDATA92EC6EFFunc == nil {
		lPALBUFFERDATA92EC6EFFunc = x
	}
	return (*C.LPALBUFFERDATA)(C.LPALBUFFERDATA_92ec6ef), nil
}

func (x LPALBUFFERDATA) PassValue() (ref C.LPALBUFFERDATA, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERDATA92EC6EFFunc == nil {
		lPALBUFFERDATA92EC6EFFunc = x
	}
	return (C.LPALBUFFERDATA)(C.LPALBUFFERDATA_92ec6ef), nil
}

func NewLPALBUFFERDATARef(ref unsafe.Pointer) *LPALBUFFERDATA {
	return (*LPALBUFFERDATA)(ref)
}

//export lPALBUFFERDATA92EC6EF
// func lPALBUFFERDATA92EC6EF(cbuffer C.ALuint, cformat C.ALenum, cdata C.ALvoid, csize C.ALsizei, cfreq C.ALsizei) {
// 	if lPALBUFFERDATA92EC6EFFunc != nil {
// 		buffer92ec6ef := (ALuint)(cbuffer)
// 		format92ec6ef := (ALenum)(cformat)
// 		data92ec6ef := (*ALvoid)(unsafe.Pointer(cdata))
// 		size92ec6ef := (ALsizei)(csize)
// 		freq92ec6ef := (ALsizei)(cfreq)
// 		lPALBUFFERDATA92EC6EFFunc(buffer92ec6ef, format92ec6ef, data92ec6ef, size92ec6ef, freq92ec6ef)
// 		return
// 	}
// 	panic("callback func has not been set (race?)")
// }

var lPALBUFFERDATA92EC6EFFunc LPALBUFFERDATA

func (x LPALBUFFERF) PassRef() (ref *C.LPALBUFFERF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERF3E62BF2EFunc == nil {
		lPALBUFFERF3E62BF2EFunc = x
	}
	return (*C.LPALBUFFERF)(C.LPALBUFFERF_3e62bf2e), nil
}

func (x LPALBUFFERF) PassValue() (ref C.LPALBUFFERF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERF3E62BF2EFunc == nil {
		lPALBUFFERF3E62BF2EFunc = x
	}
	return (C.LPALBUFFERF)(C.LPALBUFFERF_3e62bf2e), nil
}

func NewLPALBUFFERFRef(ref unsafe.Pointer) *LPALBUFFERF {
	return (*LPALBUFFERF)(ref)
}

//export lPALBUFFERF3E62BF2E
func lPALBUFFERF3E62BF2E(cbuffer C.ALuint, cparam C.ALenum, cvalue C.ALfloat) {
	if lPALBUFFERF3E62BF2EFunc != nil {
		buffer3e62bf2e := (ALuint)(cbuffer)
		param3e62bf2e := (ALenum)(cparam)
		value3e62bf2e := (ALfloat)(cvalue)
		lPALBUFFERF3E62BF2EFunc(buffer3e62bf2e, param3e62bf2e, value3e62bf2e)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALBUFFERF3E62BF2EFunc LPALBUFFERF

func (x LPALBUFFER3F) PassRef() (ref *C.LPALBUFFER3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFER3FC31DE9EBFunc == nil {
		lPALBUFFER3FC31DE9EBFunc = x
	}
	return (*C.LPALBUFFER3F)(C.LPALBUFFER3F_c31de9eb), nil
}

func (x LPALBUFFER3F) PassValue() (ref C.LPALBUFFER3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFER3FC31DE9EBFunc == nil {
		lPALBUFFER3FC31DE9EBFunc = x
	}
	return (C.LPALBUFFER3F)(C.LPALBUFFER3F_c31de9eb), nil
}

func NewLPALBUFFER3FRef(ref unsafe.Pointer) *LPALBUFFER3F {
	return (*LPALBUFFER3F)(ref)
}

//export lPALBUFFER3FC31DE9EB
func lPALBUFFER3FC31DE9EB(cbuffer C.ALuint, cparam C.ALenum, cvalue1 C.ALfloat, cvalue2 C.ALfloat, cvalue3 C.ALfloat) {
	if lPALBUFFER3FC31DE9EBFunc != nil {
		bufferc31de9eb := (ALuint)(cbuffer)
		paramc31de9eb := (ALenum)(cparam)
		value1c31de9eb := (ALfloat)(cvalue1)
		value2c31de9eb := (ALfloat)(cvalue2)
		value3c31de9eb := (ALfloat)(cvalue3)
		lPALBUFFER3FC31DE9EBFunc(bufferc31de9eb, paramc31de9eb, value1c31de9eb, value2c31de9eb, value3c31de9eb)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALBUFFER3FC31DE9EBFunc LPALBUFFER3F

func (x LPALBUFFERFV) PassRef() (ref *C.LPALBUFFERFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERFV8CE2743CFunc == nil {
		lPALBUFFERFV8CE2743CFunc = x
	}
	return (*C.LPALBUFFERFV)(C.LPALBUFFERFV_8ce2743c), nil
}

func (x LPALBUFFERFV) PassValue() (ref C.LPALBUFFERFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERFV8CE2743CFunc == nil {
		lPALBUFFERFV8CE2743CFunc = x
	}
	return (C.LPALBUFFERFV)(C.LPALBUFFERFV_8ce2743c), nil
}

func NewLPALBUFFERFVRef(ref unsafe.Pointer) *LPALBUFFERFV {
	return (*LPALBUFFERFV)(ref)
}

//export lPALBUFFERFV8CE2743C
func lPALBUFFERFV8CE2743C(cbuffer C.ALuint, cparam C.ALenum, cvalues *C.ALfloat) {
	if lPALBUFFERFV8CE2743CFunc != nil {
		buffer8ce2743c := (ALuint)(cbuffer)
		param8ce2743c := (ALenum)(cparam)
		var values8ce2743c []ALfloat
		hxf5d30cf := (*sliceHeader)(unsafe.Pointer(&values8ce2743c))
		hxf5d30cf.Data = unsafe.Pointer(cvalues)
		hxf5d30cf.Cap = 0x7fffffff
		// hxf5d30cf.Len = ?

		lPALBUFFERFV8CE2743CFunc(buffer8ce2743c, param8ce2743c, values8ce2743c)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALBUFFERFV8CE2743CFunc LPALBUFFERFV

func (x LPALBUFFERI) PassRef() (ref *C.LPALBUFFERI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERIAEDDA2BFFunc == nil {
		lPALBUFFERIAEDDA2BFFunc = x
	}
	return (*C.LPALBUFFERI)(C.LPALBUFFERI_aedda2bf), nil
}

func (x LPALBUFFERI) PassValue() (ref C.LPALBUFFERI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERIAEDDA2BFFunc == nil {
		lPALBUFFERIAEDDA2BFFunc = x
	}
	return (C.LPALBUFFERI)(C.LPALBUFFERI_aedda2bf), nil
}

func NewLPALBUFFERIRef(ref unsafe.Pointer) *LPALBUFFERI {
	return (*LPALBUFFERI)(ref)
}

//export lPALBUFFERIAEDDA2BF
func lPALBUFFERIAEDDA2BF(cbuffer C.ALuint, cparam C.ALenum, cvalue C.ALint) {
	if lPALBUFFERIAEDDA2BFFunc != nil {
		bufferaedda2bf := (ALuint)(cbuffer)
		paramaedda2bf := (ALenum)(cparam)
		valueaedda2bf := (ALint)(cvalue)
		lPALBUFFERIAEDDA2BFFunc(bufferaedda2bf, paramaedda2bf, valueaedda2bf)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALBUFFERIAEDDA2BFFunc LPALBUFFERI

func (x LPALBUFFER3I) PassRef() (ref *C.LPALBUFFER3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFER3I53A2F47AFunc == nil {
		lPALBUFFER3I53A2F47AFunc = x
	}
	return (*C.LPALBUFFER3I)(C.LPALBUFFER3I_53a2f47a), nil
}

func (x LPALBUFFER3I) PassValue() (ref C.LPALBUFFER3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFER3I53A2F47AFunc == nil {
		lPALBUFFER3I53A2F47AFunc = x
	}
	return (C.LPALBUFFER3I)(C.LPALBUFFER3I_53a2f47a), nil
}

func NewLPALBUFFER3IRef(ref unsafe.Pointer) *LPALBUFFER3I {
	return (*LPALBUFFER3I)(ref)
}

//export lPALBUFFER3I53A2F47A
func lPALBUFFER3I53A2F47A(cbuffer C.ALuint, cparam C.ALenum, cvalue1 C.ALint, cvalue2 C.ALint, cvalue3 C.ALint) {
	if lPALBUFFER3I53A2F47AFunc != nil {
		buffer53a2f47a := (ALuint)(cbuffer)
		param53a2f47a := (ALenum)(cparam)
		value153a2f47a := (ALint)(cvalue1)
		value253a2f47a := (ALint)(cvalue2)
		value353a2f47a := (ALint)(cvalue3)
		lPALBUFFER3I53A2F47AFunc(buffer53a2f47a, param53a2f47a, value153a2f47a, value253a2f47a, value353a2f47a)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALBUFFER3I53A2F47AFunc LPALBUFFER3I

func (x LPALBUFFERIV) PassRef() (ref *C.LPALBUFFERIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERIVB7A68F3Func == nil {
		lPALBUFFERIVB7A68F3Func = x
	}
	return (*C.LPALBUFFERIV)(C.LPALBUFFERIV_b7a68f3), nil
}

func (x LPALBUFFERIV) PassValue() (ref C.LPALBUFFERIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALBUFFERIVB7A68F3Func == nil {
		lPALBUFFERIVB7A68F3Func = x
	}
	return (C.LPALBUFFERIV)(C.LPALBUFFERIV_b7a68f3), nil
}

func NewLPALBUFFERIVRef(ref unsafe.Pointer) *LPALBUFFERIV {
	return (*LPALBUFFERIV)(ref)
}

//export lPALBUFFERIVB7A68F3
func lPALBUFFERIVB7A68F3(cbuffer C.ALuint, cparam C.ALenum, cvalues *C.ALint) {
	if lPALBUFFERIVB7A68F3Func != nil {
		bufferb7a68f3 := (ALuint)(cbuffer)
		paramb7a68f3 := (ALenum)(cparam)
		var valuesb7a68f3 []ALint
		hxf882e98 := (*sliceHeader)(unsafe.Pointer(&valuesb7a68f3))
		hxf882e98.Data = unsafe.Pointer(cvalues)
		hxf882e98.Cap = 0x7fffffff
		// hxf882e98.Len = ?

		lPALBUFFERIVB7A68F3Func(bufferb7a68f3, paramb7a68f3, valuesb7a68f3)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALBUFFERIVB7A68F3Func LPALBUFFERIV

func (x LPALGETBUFFERF) PassRef() (ref *C.LPALGETBUFFERF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFERF7A9E3C34Func == nil {
		lPALGETBUFFERF7A9E3C34Func = x
	}
	return (*C.LPALGETBUFFERF)(C.LPALGETBUFFERF_7a9e3c34), nil
}

func (x LPALGETBUFFERF) PassValue() (ref C.LPALGETBUFFERF, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFERF7A9E3C34Func == nil {
		lPALGETBUFFERF7A9E3C34Func = x
	}
	return (C.LPALGETBUFFERF)(C.LPALGETBUFFERF_7a9e3c34), nil
}

func NewLPALGETBUFFERFRef(ref unsafe.Pointer) *LPALGETBUFFERF {
	return (*LPALGETBUFFERF)(ref)
}

//export lPALGETBUFFERF7A9E3C34
func lPALGETBUFFERF7A9E3C34(cbuffer C.ALuint, cparam C.ALenum, cvalue *C.ALfloat) {
	if lPALGETBUFFERF7A9E3C34Func != nil {
		buffer7a9e3c34 := (ALuint)(cbuffer)
		param7a9e3c34 := (ALenum)(cparam)
		var value7a9e3c34 []ALfloat
		hxf992404 := (*sliceHeader)(unsafe.Pointer(&value7a9e3c34))
		hxf992404.Data = unsafe.Pointer(cvalue)
		hxf992404.Cap = 0x7fffffff
		// hxf992404.Len = ?

		lPALGETBUFFERF7A9E3C34Func(buffer7a9e3c34, param7a9e3c34, value7a9e3c34)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETBUFFERF7A9E3C34Func LPALGETBUFFERF

func (x LPALGETBUFFER3F) PassRef() (ref *C.LPALGETBUFFER3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFER3F3E3BEC12Func == nil {
		lPALGETBUFFER3F3E3BEC12Func = x
	}
	return (*C.LPALGETBUFFER3F)(C.LPALGETBUFFER3F_3e3bec12), nil
}

func (x LPALGETBUFFER3F) PassValue() (ref C.LPALGETBUFFER3F, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFER3F3E3BEC12Func == nil {
		lPALGETBUFFER3F3E3BEC12Func = x
	}
	return (C.LPALGETBUFFER3F)(C.LPALGETBUFFER3F_3e3bec12), nil
}

func NewLPALGETBUFFER3FRef(ref unsafe.Pointer) *LPALGETBUFFER3F {
	return (*LPALGETBUFFER3F)(ref)
}

//export lPALGETBUFFER3F3E3BEC12
func lPALGETBUFFER3F3E3BEC12(cbuffer C.ALuint, cparam C.ALenum, cvalue1 *C.ALfloat, cvalue2 *C.ALfloat, cvalue3 *C.ALfloat) {
	if lPALGETBUFFER3F3E3BEC12Func != nil {
		buffer3e3bec12 := (ALuint)(cbuffer)
		param3e3bec12 := (ALenum)(cparam)
		var value13e3bec12 []ALfloat
		hxf8e0dd2 := (*sliceHeader)(unsafe.Pointer(&value13e3bec12))
		hxf8e0dd2.Data = unsafe.Pointer(cvalue1)
		hxf8e0dd2.Cap = 0x7fffffff
		// hxf8e0dd2.Len = ?

		var value23e3bec12 []ALfloat
		hxf44d909 := (*sliceHeader)(unsafe.Pointer(&value23e3bec12))
		hxf44d909.Data = unsafe.Pointer(cvalue2)
		hxf44d909.Cap = 0x7fffffff
		// hxf44d909.Len = ?

		var value33e3bec12 []ALfloat
		hxfa835e7 := (*sliceHeader)(unsafe.Pointer(&value33e3bec12))
		hxfa835e7.Data = unsafe.Pointer(cvalue3)
		hxfa835e7.Cap = 0x7fffffff
		// hxfa835e7.Len = ?

		lPALGETBUFFER3F3E3BEC12Func(buffer3e3bec12, param3e3bec12, value13e3bec12, value23e3bec12, value33e3bec12)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETBUFFER3F3E3BEC12Func LPALGETBUFFER3F

func (x LPALGETBUFFERFV) PassRef() (ref *C.LPALGETBUFFERFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFERFV71C471C5Func == nil {
		lPALGETBUFFERFV71C471C5Func = x
	}
	return (*C.LPALGETBUFFERFV)(C.LPALGETBUFFERFV_71c471c5), nil
}

func (x LPALGETBUFFERFV) PassValue() (ref C.LPALGETBUFFERFV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFERFV71C471C5Func == nil {
		lPALGETBUFFERFV71C471C5Func = x
	}
	return (C.LPALGETBUFFERFV)(C.LPALGETBUFFERFV_71c471c5), nil
}

func NewLPALGETBUFFERFVRef(ref unsafe.Pointer) *LPALGETBUFFERFV {
	return (*LPALGETBUFFERFV)(ref)
}

//export lPALGETBUFFERFV71C471C5
func lPALGETBUFFERFV71C471C5(cbuffer C.ALuint, cparam C.ALenum, cvalues *C.ALfloat) {
	if lPALGETBUFFERFV71C471C5Func != nil {
		buffer71c471c5 := (ALuint)(cbuffer)
		param71c471c5 := (ALenum)(cparam)
		var values71c471c5 []ALfloat
		hxf8eae10 := (*sliceHeader)(unsafe.Pointer(&values71c471c5))
		hxf8eae10.Data = unsafe.Pointer(cvalues)
		hxf8eae10.Cap = 0x7fffffff
		// hxf8eae10.Len = ?

		lPALGETBUFFERFV71C471C5Func(buffer71c471c5, param71c471c5, values71c471c5)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETBUFFERFV71C471C5Func LPALGETBUFFERFV

func (x LPALGETBUFFERI) PassRef() (ref *C.LPALGETBUFFERI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFERIEA2121A5Func == nil {
		lPALGETBUFFERIEA2121A5Func = x
	}
	return (*C.LPALGETBUFFERI)(C.LPALGETBUFFERI_ea2121a5), nil
}

func (x LPALGETBUFFERI) PassValue() (ref C.LPALGETBUFFERI, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFERIEA2121A5Func == nil {
		lPALGETBUFFERIEA2121A5Func = x
	}
	return (C.LPALGETBUFFERI)(C.LPALGETBUFFERI_ea2121a5), nil
}

func NewLPALGETBUFFERIRef(ref unsafe.Pointer) *LPALGETBUFFERI {
	return (*LPALGETBUFFERI)(ref)
}

//export lPALGETBUFFERIEA2121A5
func lPALGETBUFFERIEA2121A5(cbuffer C.ALuint, cparam C.ALenum, cvalue *C.ALint) {
	if lPALGETBUFFERIEA2121A5Func != nil {
		bufferea2121a5 := (ALuint)(cbuffer)
		paramea2121a5 := (ALenum)(cparam)
		var valueea2121a5 []ALint
		hxfeb55cf := (*sliceHeader)(unsafe.Pointer(&valueea2121a5))
		hxfeb55cf.Data = unsafe.Pointer(cvalue)
		hxfeb55cf.Cap = 0x7fffffff
		// hxfeb55cf.Len = ?

		lPALGETBUFFERIEA2121A5Func(bufferea2121a5, paramea2121a5, valueea2121a5)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETBUFFERIEA2121A5Func LPALGETBUFFERI

func (x LPALGETBUFFER3I) PassRef() (ref *C.LPALGETBUFFER3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFER3IAE84F183Func == nil {
		lPALGETBUFFER3IAE84F183Func = x
	}
	return (*C.LPALGETBUFFER3I)(C.LPALGETBUFFER3I_ae84f183), nil
}

func (x LPALGETBUFFER3I) PassValue() (ref C.LPALGETBUFFER3I, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFER3IAE84F183Func == nil {
		lPALGETBUFFER3IAE84F183Func = x
	}
	return (C.LPALGETBUFFER3I)(C.LPALGETBUFFER3I_ae84f183), nil
}

func NewLPALGETBUFFER3IRef(ref unsafe.Pointer) *LPALGETBUFFER3I {
	return (*LPALGETBUFFER3I)(ref)
}

//export lPALGETBUFFER3IAE84F183
func lPALGETBUFFER3IAE84F183(cbuffer C.ALuint, cparam C.ALenum, cvalue1 *C.ALint, cvalue2 *C.ALint, cvalue3 *C.ALint) {
	if lPALGETBUFFER3IAE84F183Func != nil {
		bufferae84f183 := (ALuint)(cbuffer)
		paramae84f183 := (ALenum)(cparam)
		var value1ae84f183 []ALint
		hxf458096 := (*sliceHeader)(unsafe.Pointer(&value1ae84f183))
		hxf458096.Data = unsafe.Pointer(cvalue1)
		hxf458096.Cap = 0x7fffffff
		// hxf458096.Len = ?

		var value2ae84f183 []ALint
		hxf9aab83 := (*sliceHeader)(unsafe.Pointer(&value2ae84f183))
		hxf9aab83.Data = unsafe.Pointer(cvalue2)
		hxf9aab83.Cap = 0x7fffffff
		// hxf9aab83.Len = ?

		var value3ae84f183 []ALint
		hxf8b35a8 := (*sliceHeader)(unsafe.Pointer(&value3ae84f183))
		hxf8b35a8.Data = unsafe.Pointer(cvalue3)
		hxf8b35a8.Cap = 0x7fffffff
		// hxf8b35a8.Len = ?

		lPALGETBUFFER3IAE84F183Func(bufferae84f183, paramae84f183, value1ae84f183, value2ae84f183, value3ae84f183)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETBUFFER3IAE84F183Func LPALGETBUFFER3I

func (x LPALGETBUFFERIV) PassRef() (ref *C.LPALGETBUFFERIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFERIVF65C6D0AFunc == nil {
		lPALGETBUFFERIVF65C6D0AFunc = x
	}
	return (*C.LPALGETBUFFERIV)(C.LPALGETBUFFERIV_f65c6d0a), nil
}

func (x LPALGETBUFFERIV) PassValue() (ref C.LPALGETBUFFERIV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALGETBUFFERIVF65C6D0AFunc == nil {
		lPALGETBUFFERIVF65C6D0AFunc = x
	}
	return (C.LPALGETBUFFERIV)(C.LPALGETBUFFERIV_f65c6d0a), nil
}

func NewLPALGETBUFFERIVRef(ref unsafe.Pointer) *LPALGETBUFFERIV {
	return (*LPALGETBUFFERIV)(ref)
}

//export lPALGETBUFFERIVF65C6D0A
func lPALGETBUFFERIVF65C6D0A(cbuffer C.ALuint, cparam C.ALenum, cvalues *C.ALint) {
	if lPALGETBUFFERIVF65C6D0AFunc != nil {
		bufferf65c6d0a := (ALuint)(cbuffer)
		paramf65c6d0a := (ALenum)(cparam)
		var valuesf65c6d0a []ALint
		hxf8959c2 := (*sliceHeader)(unsafe.Pointer(&valuesf65c6d0a))
		hxf8959c2.Data = unsafe.Pointer(cvalues)
		hxf8959c2.Cap = 0x7fffffff
		// hxf8959c2.Len = ?

		lPALGETBUFFERIVF65C6D0AFunc(bufferf65c6d0a, paramf65c6d0a, valuesf65c6d0a)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALGETBUFFERIVF65C6D0AFunc LPALGETBUFFERIV

func (x LPALDOPPLERFACTOR) PassRef() (ref *C.LPALDOPPLERFACTOR, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDOPPLERFACTOR6E5E34C4Func == nil {
		lPALDOPPLERFACTOR6E5E34C4Func = x
	}
	return (*C.LPALDOPPLERFACTOR)(C.LPALDOPPLERFACTOR_6e5e34c4), nil
}

func (x LPALDOPPLERFACTOR) PassValue() (ref C.LPALDOPPLERFACTOR, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDOPPLERFACTOR6E5E34C4Func == nil {
		lPALDOPPLERFACTOR6E5E34C4Func = x
	}
	return (C.LPALDOPPLERFACTOR)(C.LPALDOPPLERFACTOR_6e5e34c4), nil
}

func NewLPALDOPPLERFACTORRef(ref unsafe.Pointer) *LPALDOPPLERFACTOR {
	return (*LPALDOPPLERFACTOR)(ref)
}

//export lPALDOPPLERFACTOR6E5E34C4
func lPALDOPPLERFACTOR6E5E34C4(cvalue C.ALfloat) {
	if lPALDOPPLERFACTOR6E5E34C4Func != nil {
		value6e5e34c4 := (ALfloat)(cvalue)
		lPALDOPPLERFACTOR6E5E34C4Func(value6e5e34c4)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALDOPPLERFACTOR6E5E34C4Func LPALDOPPLERFACTOR

func (x LPALDOPPLERVELOCITY) PassRef() (ref *C.LPALDOPPLERVELOCITY, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDOPPLERVELOCITY37AC1909Func == nil {
		lPALDOPPLERVELOCITY37AC1909Func = x
	}
	return (*C.LPALDOPPLERVELOCITY)(C.LPALDOPPLERVELOCITY_37ac1909), nil
}

func (x LPALDOPPLERVELOCITY) PassValue() (ref C.LPALDOPPLERVELOCITY, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDOPPLERVELOCITY37AC1909Func == nil {
		lPALDOPPLERVELOCITY37AC1909Func = x
	}
	return (C.LPALDOPPLERVELOCITY)(C.LPALDOPPLERVELOCITY_37ac1909), nil
}

func NewLPALDOPPLERVELOCITYRef(ref unsafe.Pointer) *LPALDOPPLERVELOCITY {
	return (*LPALDOPPLERVELOCITY)(ref)
}

//export lPALDOPPLERVELOCITY37AC1909
func lPALDOPPLERVELOCITY37AC1909(cvalue C.ALfloat) {
	if lPALDOPPLERVELOCITY37AC1909Func != nil {
		value37ac1909 := (ALfloat)(cvalue)
		lPALDOPPLERVELOCITY37AC1909Func(value37ac1909)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALDOPPLERVELOCITY37AC1909Func LPALDOPPLERVELOCITY

func (x LPALSPEEDOFSOUND) PassRef() (ref *C.LPALSPEEDOFSOUND, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSPEEDOFSOUNDC05FBD29Func == nil {
		lPALSPEEDOFSOUNDC05FBD29Func = x
	}
	return (*C.LPALSPEEDOFSOUND)(C.LPALSPEEDOFSOUND_c05fbd29), nil
}

func (x LPALSPEEDOFSOUND) PassValue() (ref C.LPALSPEEDOFSOUND, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALSPEEDOFSOUNDC05FBD29Func == nil {
		lPALSPEEDOFSOUNDC05FBD29Func = x
	}
	return (C.LPALSPEEDOFSOUND)(C.LPALSPEEDOFSOUND_c05fbd29), nil
}

func NewLPALSPEEDOFSOUNDRef(ref unsafe.Pointer) *LPALSPEEDOFSOUND {
	return (*LPALSPEEDOFSOUND)(ref)
}

//export lPALSPEEDOFSOUNDC05FBD29
func lPALSPEEDOFSOUNDC05FBD29(cvalue C.ALfloat) {
	if lPALSPEEDOFSOUNDC05FBD29Func != nil {
		valuec05fbd29 := (ALfloat)(cvalue)
		lPALSPEEDOFSOUNDC05FBD29Func(valuec05fbd29)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALSPEEDOFSOUNDC05FBD29Func LPALSPEEDOFSOUND

func (x LPALDISTANCEMODEL) PassRef() (ref *C.LPALDISTANCEMODEL, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDISTANCEMODEL69926DAAFunc == nil {
		lPALDISTANCEMODEL69926DAAFunc = x
	}
	return (*C.LPALDISTANCEMODEL)(C.LPALDISTANCEMODEL_69926daa), nil
}

func (x LPALDISTANCEMODEL) PassValue() (ref C.LPALDISTANCEMODEL, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALDISTANCEMODEL69926DAAFunc == nil {
		lPALDISTANCEMODEL69926DAAFunc = x
	}
	return (C.LPALDISTANCEMODEL)(C.LPALDISTANCEMODEL_69926daa), nil
}

func NewLPALDISTANCEMODELRef(ref unsafe.Pointer) *LPALDISTANCEMODEL {
	return (*LPALDISTANCEMODEL)(ref)
}

//export lPALDISTANCEMODEL69926DAA
func lPALDISTANCEMODEL69926DAA(cdistanceModel C.ALenum) {
	if lPALDISTANCEMODEL69926DAAFunc != nil {
		distanceModel69926daa := (ALenum)(cdistanceModel)
		lPALDISTANCEMODEL69926DAAFunc(distanceModel69926daa)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALDISTANCEMODEL69926DAAFunc LPALDISTANCEMODEL

// Ref returns a reference to C object as it is.
func (x *ALCdevice) Ref() *C.ALCdevice {
	if x == nil {
		return nil
	}
	return (*C.ALCdevice)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *ALCdevice) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewALCdeviceRef converts the C object reference into a raw struct reference without wrapping.
func NewALCdeviceRef(ref unsafe.Pointer) *ALCdevice {
	return (*ALCdevice)(ref)
}

// NewALCdevice allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewALCdevice() *ALCdevice {
	return (*ALCdevice)(allocALCdeviceMemory(1))
}

// allocALCdeviceMemory allocates memory for type C.ALCdevice in C.
// The caller is responsible for freeing the this memory via C.free.
func allocALCdeviceMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfALCdeviceValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfALCdeviceValue = unsafe.Sizeof([1]C.ALCdevice{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *ALCdevice) PassRef() *C.ALCdevice {
	if x == nil {
		x = (*ALCdevice)(allocALCdeviceMemory(1))
	}
	return (*C.ALCdevice)(unsafe.Pointer(x))
}

// Ref returns a reference to C object as it is.
func (x *ALCcontext) Ref() *C.ALCcontext {
	if x == nil {
		return nil
	}
	return (*C.ALCcontext)(unsafe.Pointer(x))
}

// Free cleanups the referenced memory using C free.
func (x *ALCcontext) Free() {
	if x != nil {
		C.free(unsafe.Pointer(x))
	}
}

// NewALCcontextRef converts the C object reference into a raw struct reference without wrapping.
func NewALCcontextRef(ref unsafe.Pointer) *ALCcontext {
	return (*ALCcontext)(ref)
}

// NewALCcontext allocates a new C object of this type and converts the reference into
// a raw struct reference without wrapping.
func NewALCcontext() *ALCcontext {
	return (*ALCcontext)(allocALCcontextMemory(1))
}

// allocALCcontextMemory allocates memory for type C.ALCcontext in C.
// The caller is responsible for freeing the this memory via C.free.
func allocALCcontextMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfALCcontextValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfALCcontextValue = unsafe.Sizeof([1]C.ALCcontext{})

// PassRef returns a reference to C object as it is or allocates a new C object of this type.
func (x *ALCcontext) PassRef() *C.ALCcontext {
	if x == nil {
		x = (*ALCcontext)(allocALCcontextMemory(1))
	}
	return (*C.ALCcontext)(unsafe.Pointer(x))
}

func (x LPALCCREATECONTEXT) PassRef() (ref *C.LPALCCREATECONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCREATECONTEXTB16FC55AFunc == nil {
		lPALCCREATECONTEXTB16FC55AFunc = x
	}
	return (*C.LPALCCREATECONTEXT)(C.LPALCCREATECONTEXT_b16fc55a), nil
}

func (x LPALCCREATECONTEXT) PassValue() (ref C.LPALCCREATECONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCREATECONTEXTB16FC55AFunc == nil {
		lPALCCREATECONTEXTB16FC55AFunc = x
	}
	return (C.LPALCCREATECONTEXT)(C.LPALCCREATECONTEXT_b16fc55a), nil
}

func NewLPALCCREATECONTEXTRef(ref unsafe.Pointer) *LPALCCREATECONTEXT {
	return (*LPALCCREATECONTEXT)(ref)
}

//export lPALCCREATECONTEXTB16FC55A
func lPALCCREATECONTEXTB16FC55A(cdevice *C.ALCdevice, cattrlist *C.ALCint) *C.ALCcontext {
	if lPALCCREATECONTEXTB16FC55AFunc != nil {
		var deviceb16fc55a []ALCdevice
		hxfb029a7 := (*sliceHeader)(unsafe.Pointer(&deviceb16fc55a))
		hxfb029a7.Data = unsafe.Pointer(cdevice)
		hxfb029a7.Cap = 0x7fffffff
		// hxfb029a7.Len = ?

		var attrlistb16fc55a []ALCint
		hxf7d15a2 := (*sliceHeader)(unsafe.Pointer(&attrlistb16fc55a))
		hxf7d15a2.Data = unsafe.Pointer(cattrlist)
		hxf7d15a2.Cap = 0x7fffffff
		// hxf7d15a2.Len = ?

		retb16fc55a := lPALCCREATECONTEXTB16FC55AFunc(deviceb16fc55a, attrlistb16fc55a)
		ret, _ := (*C.ALCcontext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&retb16fc55a)).Data)), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCCREATECONTEXTB16FC55AFunc LPALCCREATECONTEXT

func (x LPALCMAKECONTEXTCURRENT) PassRef() (ref *C.LPALCMAKECONTEXTCURRENT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCMAKECONTEXTCURRENTC13D1DFCFunc == nil {
		lPALCMAKECONTEXTCURRENTC13D1DFCFunc = x
	}
	return (*C.LPALCMAKECONTEXTCURRENT)(C.LPALCMAKECONTEXTCURRENT_c13d1dfc), nil
}

func (x LPALCMAKECONTEXTCURRENT) PassValue() (ref C.LPALCMAKECONTEXTCURRENT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCMAKECONTEXTCURRENTC13D1DFCFunc == nil {
		lPALCMAKECONTEXTCURRENTC13D1DFCFunc = x
	}
	return (C.LPALCMAKECONTEXTCURRENT)(C.LPALCMAKECONTEXTCURRENT_c13d1dfc), nil
}

func NewLPALCMAKECONTEXTCURRENTRef(ref unsafe.Pointer) *LPALCMAKECONTEXTCURRENT {
	return (*LPALCMAKECONTEXTCURRENT)(ref)
}

//export lPALCMAKECONTEXTCURRENTC13D1DFC
func lPALCMAKECONTEXTCURRENTC13D1DFC(ccontext *C.ALCcontext) C.ALCboolean {
	if lPALCMAKECONTEXTCURRENTC13D1DFCFunc != nil {
		var contextc13d1dfc []ALCcontext
		hxf8dbbe5 := (*sliceHeader)(unsafe.Pointer(&contextc13d1dfc))
		hxf8dbbe5.Data = unsafe.Pointer(ccontext)
		hxf8dbbe5.Cap = 0x7fffffff
		// hxf8dbbe5.Len = ?

		retc13d1dfc := lPALCMAKECONTEXTCURRENTC13D1DFCFunc(contextc13d1dfc)
		ret, _ := (C.ALCboolean)(retc13d1dfc), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCMAKECONTEXTCURRENTC13D1DFCFunc LPALCMAKECONTEXTCURRENT

func (x LPALCPROCESSCONTEXT) PassRef() (ref *C.LPALCPROCESSCONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCPROCESSCONTEXT80CC7C79Func == nil {
		lPALCPROCESSCONTEXT80CC7C79Func = x
	}
	return (*C.LPALCPROCESSCONTEXT)(C.LPALCPROCESSCONTEXT_80cc7c79), nil
}

func (x LPALCPROCESSCONTEXT) PassValue() (ref C.LPALCPROCESSCONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCPROCESSCONTEXT80CC7C79Func == nil {
		lPALCPROCESSCONTEXT80CC7C79Func = x
	}
	return (C.LPALCPROCESSCONTEXT)(C.LPALCPROCESSCONTEXT_80cc7c79), nil
}

func NewLPALCPROCESSCONTEXTRef(ref unsafe.Pointer) *LPALCPROCESSCONTEXT {
	return (*LPALCPROCESSCONTEXT)(ref)
}

//export lPALCPROCESSCONTEXT80CC7C79
func lPALCPROCESSCONTEXT80CC7C79(ccontext *C.ALCcontext) {
	if lPALCPROCESSCONTEXT80CC7C79Func != nil {
		var context80cc7c79 []ALCcontext
		hxf766ff8 := (*sliceHeader)(unsafe.Pointer(&context80cc7c79))
		hxf766ff8.Data = unsafe.Pointer(ccontext)
		hxf766ff8.Cap = 0x7fffffff
		// hxf766ff8.Len = ?

		lPALCPROCESSCONTEXT80CC7C79Func(context80cc7c79)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALCPROCESSCONTEXT80CC7C79Func LPALCPROCESSCONTEXT

func (x LPALCSUSPENDCONTEXT) PassRef() (ref *C.LPALCSUSPENDCONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCSUSPENDCONTEXT9429C059Func == nil {
		lPALCSUSPENDCONTEXT9429C059Func = x
	}
	return (*C.LPALCSUSPENDCONTEXT)(C.LPALCSUSPENDCONTEXT_9429c059), nil
}

func (x LPALCSUSPENDCONTEXT) PassValue() (ref C.LPALCSUSPENDCONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCSUSPENDCONTEXT9429C059Func == nil {
		lPALCSUSPENDCONTEXT9429C059Func = x
	}
	return (C.LPALCSUSPENDCONTEXT)(C.LPALCSUSPENDCONTEXT_9429c059), nil
}

func NewLPALCSUSPENDCONTEXTRef(ref unsafe.Pointer) *LPALCSUSPENDCONTEXT {
	return (*LPALCSUSPENDCONTEXT)(ref)
}

//export lPALCSUSPENDCONTEXT9429C059
func lPALCSUSPENDCONTEXT9429C059(ccontext *C.ALCcontext) {
	if lPALCSUSPENDCONTEXT9429C059Func != nil {
		var context9429c059 []ALCcontext
		hxf9b1633 := (*sliceHeader)(unsafe.Pointer(&context9429c059))
		hxf9b1633.Data = unsafe.Pointer(ccontext)
		hxf9b1633.Cap = 0x7fffffff
		// hxf9b1633.Len = ?

		lPALCSUSPENDCONTEXT9429C059Func(context9429c059)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALCSUSPENDCONTEXT9429C059Func LPALCSUSPENDCONTEXT

func (x LPALCDESTROYCONTEXT) PassRef() (ref *C.LPALCDESTROYCONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCDESTROYCONTEXTA63F2985Func == nil {
		lPALCDESTROYCONTEXTA63F2985Func = x
	}
	return (*C.LPALCDESTROYCONTEXT)(C.LPALCDESTROYCONTEXT_a63f2985), nil
}

func (x LPALCDESTROYCONTEXT) PassValue() (ref C.LPALCDESTROYCONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCDESTROYCONTEXTA63F2985Func == nil {
		lPALCDESTROYCONTEXTA63F2985Func = x
	}
	return (C.LPALCDESTROYCONTEXT)(C.LPALCDESTROYCONTEXT_a63f2985), nil
}

func NewLPALCDESTROYCONTEXTRef(ref unsafe.Pointer) *LPALCDESTROYCONTEXT {
	return (*LPALCDESTROYCONTEXT)(ref)
}

//export lPALCDESTROYCONTEXTA63F2985
func lPALCDESTROYCONTEXTA63F2985(ccontext *C.ALCcontext) {
	if lPALCDESTROYCONTEXTA63F2985Func != nil {
		var contexta63f2985 []ALCcontext
		hxf502c9a := (*sliceHeader)(unsafe.Pointer(&contexta63f2985))
		hxf502c9a.Data = unsafe.Pointer(ccontext)
		hxf502c9a.Cap = 0x7fffffff
		// hxf502c9a.Len = ?

		lPALCDESTROYCONTEXTA63F2985Func(contexta63f2985)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALCDESTROYCONTEXTA63F2985Func LPALCDESTROYCONTEXT

func (x LPALCGETCURRENTCONTEXT) PassRef() (ref *C.LPALCGETCURRENTCONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETCURRENTCONTEXT9EF7BA4CFunc == nil {
		lPALCGETCURRENTCONTEXT9EF7BA4CFunc = x
	}
	return (*C.LPALCGETCURRENTCONTEXT)(C.LPALCGETCURRENTCONTEXT_9ef7ba4c), nil
}

func (x LPALCGETCURRENTCONTEXT) PassValue() (ref C.LPALCGETCURRENTCONTEXT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETCURRENTCONTEXT9EF7BA4CFunc == nil {
		lPALCGETCURRENTCONTEXT9EF7BA4CFunc = x
	}
	return (C.LPALCGETCURRENTCONTEXT)(C.LPALCGETCURRENTCONTEXT_9ef7ba4c), nil
}

func NewLPALCGETCURRENTCONTEXTRef(ref unsafe.Pointer) *LPALCGETCURRENTCONTEXT {
	return (*LPALCGETCURRENTCONTEXT)(ref)
}

//export lPALCGETCURRENTCONTEXT9EF7BA4C
func lPALCGETCURRENTCONTEXT9EF7BA4C() *C.ALCcontext {
	if lPALCGETCURRENTCONTEXT9EF7BA4CFunc != nil {
		ret9ef7ba4c := lPALCGETCURRENTCONTEXT9EF7BA4CFunc()
		ret, _ := (*C.ALCcontext)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ret9ef7ba4c)).Data)), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCGETCURRENTCONTEXT9EF7BA4CFunc LPALCGETCURRENTCONTEXT

func (x LPALCGETCONTEXTSDEVICE) PassRef() (ref *C.LPALCGETCONTEXTSDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETCONTEXTSDEVICE348EACEEFunc == nil {
		lPALCGETCONTEXTSDEVICE348EACEEFunc = x
	}
	return (*C.LPALCGETCONTEXTSDEVICE)(C.LPALCGETCONTEXTSDEVICE_348eacee), nil
}

func (x LPALCGETCONTEXTSDEVICE) PassValue() (ref C.LPALCGETCONTEXTSDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETCONTEXTSDEVICE348EACEEFunc == nil {
		lPALCGETCONTEXTSDEVICE348EACEEFunc = x
	}
	return (C.LPALCGETCONTEXTSDEVICE)(C.LPALCGETCONTEXTSDEVICE_348eacee), nil
}

func NewLPALCGETCONTEXTSDEVICERef(ref unsafe.Pointer) *LPALCGETCONTEXTSDEVICE {
	return (*LPALCGETCONTEXTSDEVICE)(ref)
}

//export lPALCGETCONTEXTSDEVICE348EACEE
func lPALCGETCONTEXTSDEVICE348EACEE(ccontext *C.ALCcontext) *C.ALCdevice {
	if lPALCGETCONTEXTSDEVICE348EACEEFunc != nil {
		var context348eacee []ALCcontext
		hxf4a9453 := (*sliceHeader)(unsafe.Pointer(&context348eacee))
		hxf4a9453.Data = unsafe.Pointer(ccontext)
		hxf4a9453.Cap = 0x7fffffff
		// hxf4a9453.Len = ?

		ret348eacee := lPALCGETCONTEXTSDEVICE348EACEEFunc(context348eacee)
		ret, _ := (*C.ALCdevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ret348eacee)).Data)), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCGETCONTEXTSDEVICE348EACEEFunc LPALCGETCONTEXTSDEVICE

// packSALCchar reads sliced Go data structure out from plain C format.
func packSALCchar(v []ALCchar, ptr0 *C.ALCchar) {
	const m = 0x7fffffff
	// for i0 := range v {
		// ptr1 := (*(*[m / sizeOfALCcharValue]C.ALCchar)(unsafe.Pointer(ptr0)))[i0]
		// v[i0] = *NewALCcharRef(unsafe.Pointer(&ptr1))
	// }
}

func (x LPALCOPENDEVICE) PassRef() (ref *C.LPALCOPENDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCOPENDEVICE45B1D80FFunc == nil {
		lPALCOPENDEVICE45B1D80FFunc = x
	}
	return (*C.LPALCOPENDEVICE)(C.LPALCOPENDEVICE_45b1d80f), nil
}

func (x LPALCOPENDEVICE) PassValue() (ref C.LPALCOPENDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCOPENDEVICE45B1D80FFunc == nil {
		lPALCOPENDEVICE45B1D80FFunc = x
	}
	return (C.LPALCOPENDEVICE)(C.LPALCOPENDEVICE_45b1d80f), nil
}

func NewLPALCOPENDEVICERef(ref unsafe.Pointer) *LPALCOPENDEVICE {
	return (*LPALCOPENDEVICE)(ref)
}

//export lPALCOPENDEVICE45B1D80F
func lPALCOPENDEVICE45B1D80F(cdevicename *C.ALCchar) *C.ALCdevice {
	if lPALCOPENDEVICE45B1D80FFunc != nil {
		var devicename45b1d80f []ALCchar
		packSALCchar(devicename45b1d80f, cdevicename)
		ret45b1d80f := lPALCOPENDEVICE45B1D80FFunc(devicename45b1d80f)
		ret, _ := (*C.ALCdevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&ret45b1d80f)).Data)), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCOPENDEVICE45B1D80FFunc LPALCOPENDEVICE

func (x LPALCCLOSEDEVICE) PassRef() (ref *C.LPALCCLOSEDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCLOSEDEVICE188AFBC4Func == nil {
		lPALCCLOSEDEVICE188AFBC4Func = x
	}
	return (*C.LPALCCLOSEDEVICE)(C.LPALCCLOSEDEVICE_188afbc4), nil
}

func (x LPALCCLOSEDEVICE) PassValue() (ref C.LPALCCLOSEDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCLOSEDEVICE188AFBC4Func == nil {
		lPALCCLOSEDEVICE188AFBC4Func = x
	}
	return (C.LPALCCLOSEDEVICE)(C.LPALCCLOSEDEVICE_188afbc4), nil
}

func NewLPALCCLOSEDEVICERef(ref unsafe.Pointer) *LPALCCLOSEDEVICE {
	return (*LPALCCLOSEDEVICE)(ref)
}

//export lPALCCLOSEDEVICE188AFBC4
func lPALCCLOSEDEVICE188AFBC4(cdevice *C.ALCdevice) C.ALCboolean {
	if lPALCCLOSEDEVICE188AFBC4Func != nil {
		var device188afbc4 []ALCdevice
		hxf1a1416 := (*sliceHeader)(unsafe.Pointer(&device188afbc4))
		hxf1a1416.Data = unsafe.Pointer(cdevice)
		hxf1a1416.Cap = 0x7fffffff
		// hxf1a1416.Len = ?

		ret188afbc4 := lPALCCLOSEDEVICE188AFBC4Func(device188afbc4)
		ret, _ := (C.ALCboolean)(ret188afbc4), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCCLOSEDEVICE188AFBC4Func LPALCCLOSEDEVICE

func (x LPALCGETERROR) PassRef() (ref *C.LPALCGETERROR, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETERRORAEB8780AFunc == nil {
		lPALCGETERRORAEB8780AFunc = x
	}
	return (*C.LPALCGETERROR)(C.LPALCGETERROR_aeb8780a), nil
}

func (x LPALCGETERROR) PassValue() (ref C.LPALCGETERROR, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETERRORAEB8780AFunc == nil {
		lPALCGETERRORAEB8780AFunc = x
	}
	return (C.LPALCGETERROR)(C.LPALCGETERROR_aeb8780a), nil
}

func NewLPALCGETERRORRef(ref unsafe.Pointer) *LPALCGETERROR {
	return (*LPALCGETERROR)(ref)
}

//export lPALCGETERRORAEB8780A
func lPALCGETERRORAEB8780A(cdevice *C.ALCdevice) C.ALCenum {
	if lPALCGETERRORAEB8780AFunc != nil {
		var deviceaeb8780a []ALCdevice
		hxf92be66 := (*sliceHeader)(unsafe.Pointer(&deviceaeb8780a))
		hxf92be66.Data = unsafe.Pointer(cdevice)
		hxf92be66.Cap = 0x7fffffff
		// hxf92be66.Len = ?

		retaeb8780a := lPALCGETERRORAEB8780AFunc(deviceaeb8780a)
		ret, _ := (C.ALCenum)(retaeb8780a), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCGETERRORAEB8780AFunc LPALCGETERROR

func (x LPALCISEXTENSIONPRESENT) PassRef() (ref *C.LPALCISEXTENSIONPRESENT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCISEXTENSIONPRESENT9FA44568Func == nil {
		lPALCISEXTENSIONPRESENT9FA44568Func = x
	}
	return (*C.LPALCISEXTENSIONPRESENT)(C.LPALCISEXTENSIONPRESENT_9fa44568), nil
}

func (x LPALCISEXTENSIONPRESENT) PassValue() (ref C.LPALCISEXTENSIONPRESENT, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCISEXTENSIONPRESENT9FA44568Func == nil {
		lPALCISEXTENSIONPRESENT9FA44568Func = x
	}
	return (C.LPALCISEXTENSIONPRESENT)(C.LPALCISEXTENSIONPRESENT_9fa44568), nil
}

func NewLPALCISEXTENSIONPRESENTRef(ref unsafe.Pointer) *LPALCISEXTENSIONPRESENT {
	return (*LPALCISEXTENSIONPRESENT)(ref)
}

//export lPALCISEXTENSIONPRESENT9FA44568
func lPALCISEXTENSIONPRESENT9FA44568(cdevice *C.ALCdevice, cextname *C.ALCchar) C.ALCboolean {
	if lPALCISEXTENSIONPRESENT9FA44568Func != nil {
		var device9fa44568 []ALCdevice
		hxf4b5187 := (*sliceHeader)(unsafe.Pointer(&device9fa44568))
		hxf4b5187.Data = unsafe.Pointer(cdevice)
		hxf4b5187.Cap = 0x7fffffff
		// hxf4b5187.Len = ?

		var extname9fa44568 []ALCchar
		packSALCchar(extname9fa44568, cextname)
		ret9fa44568 := lPALCISEXTENSIONPRESENT9FA44568Func(device9fa44568, extname9fa44568)
		ret, _ := (C.ALCboolean)(ret9fa44568), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCISEXTENSIONPRESENT9FA44568Func LPALCISEXTENSIONPRESENT

func (x LPALCGETPROCADDRESS) PassRef() (ref *C.LPALCGETPROCADDRESS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETPROCADDRESS1C77514FFunc == nil {
		lPALCGETPROCADDRESS1C77514FFunc = x
	}
	return (*C.LPALCGETPROCADDRESS)(C.LPALCGETPROCADDRESS_1c77514f), nil
}

func (x LPALCGETPROCADDRESS) PassValue() (ref C.LPALCGETPROCADDRESS, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETPROCADDRESS1C77514FFunc == nil {
		lPALCGETPROCADDRESS1C77514FFunc = x
	}
	return (C.LPALCGETPROCADDRESS)(C.LPALCGETPROCADDRESS_1c77514f), nil
}

func NewLPALCGETPROCADDRESSRef(ref unsafe.Pointer) *LPALCGETPROCADDRESS {
	return (*LPALCGETPROCADDRESS)(ref)
}

//export lPALCGETPROCADDRESS1C77514F
func lPALCGETPROCADDRESS1C77514F(cdevice *C.ALCdevice, cfuncname *C.ALCchar) unsafe.Pointer {
	if lPALCGETPROCADDRESS1C77514FFunc != nil {
		var device1c77514f []ALCdevice
		hxf177f79 := (*sliceHeader)(unsafe.Pointer(&device1c77514f))
		hxf177f79.Data = unsafe.Pointer(cdevice)
		hxf177f79.Cap = 0x7fffffff
		// hxf177f79.Len = ?

		var funcname1c77514f []ALCchar
		packSALCchar(funcname1c77514f, cfuncname)
		ret1c77514f := lPALCGETPROCADDRESS1C77514FFunc(device1c77514f, funcname1c77514f)
		ret, _ := ret1c77514f, cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCGETPROCADDRESS1C77514FFunc LPALCGETPROCADDRESS

func (x LPALCGETENUMVALUE) PassRef() (ref *C.LPALCGETENUMVALUE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETENUMVALUEC4C0E61CFunc == nil {
		lPALCGETENUMVALUEC4C0E61CFunc = x
	}
	return (*C.LPALCGETENUMVALUE)(C.LPALCGETENUMVALUE_c4c0e61c), nil
}

func (x LPALCGETENUMVALUE) PassValue() (ref C.LPALCGETENUMVALUE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETENUMVALUEC4C0E61CFunc == nil {
		lPALCGETENUMVALUEC4C0E61CFunc = x
	}
	return (C.LPALCGETENUMVALUE)(C.LPALCGETENUMVALUE_c4c0e61c), nil
}

func NewLPALCGETENUMVALUERef(ref unsafe.Pointer) *LPALCGETENUMVALUE {
	return (*LPALCGETENUMVALUE)(ref)
}

//export lPALCGETENUMVALUEC4C0E61C
func lPALCGETENUMVALUEC4C0E61C(cdevice *C.ALCdevice, cenumname *C.ALCchar) C.ALCenum {
	if lPALCGETENUMVALUEC4C0E61CFunc != nil {
		var devicec4c0e61c []ALCdevice
		hxfaa359c := (*sliceHeader)(unsafe.Pointer(&devicec4c0e61c))
		hxfaa359c.Data = unsafe.Pointer(cdevice)
		hxfaa359c.Cap = 0x7fffffff
		// hxfaa359c.Len = ?

		var enumnamec4c0e61c []ALCchar
		packSALCchar(enumnamec4c0e61c, cenumname)
		retc4c0e61c := lPALCGETENUMVALUEC4C0E61CFunc(devicec4c0e61c, enumnamec4c0e61c)
		ret, _ := (C.ALCenum)(retc4c0e61c), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCGETENUMVALUEC4C0E61CFunc LPALCGETENUMVALUE

// allocALCcharMemory allocates memory for type C.ALCchar in C.
// The caller is responsible for freeing the this memory via C.free.
func allocALCcharMemory(n int) unsafe.Pointer {
	mem, err := C.calloc(C.size_t(n), (C.size_t)(sizeOfALCcharValue))
	if err != nil {
		panic("memory alloc error: " + err.Error())
	}
	return mem
}

const sizeOfALCcharValue = unsafe.Sizeof([1]C.ALCchar{})

// unpackArgSALCchar transforms a sliced Go data structure into plain C format.
func unpackArgSALCchar(x []ALCchar) (unpacked *C.ALCchar, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	allocs = new(cgoAllocMap)
	defer runtime.SetFinalizer(&unpacked, func(**C.ALCchar) {
		go allocs.Free()
	})

	len0 := len(x)
	mem0 := allocALCcharMemory(len0)
	allocs.Add(mem0)
	h0 := &sliceHeader{
		Data: mem0,
		Cap:  len0,
		Len:  len0,
	}
	v0 := *(*[]C.ALCchar)(unsafe.Pointer(h0))
	// for i0 := range x {
	// 	allocs0 := new(cgoAllocMap)
	// 	// v0[i0], allocs0 = x[i0].PassValue()
	// 	allocs.Borrow(allocs0)
	// }
	h := (*sliceHeader)(unsafe.Pointer(&v0))
	unpacked = (*C.ALCchar)(h.Data)
	return
}

func (x LPALCGETSTRING) PassRef() (ref *C.LPALCGETSTRING, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETSTRING62F45F11Func == nil {
		lPALCGETSTRING62F45F11Func = x
	}
	return (*C.LPALCGETSTRING)(C.LPALCGETSTRING_62f45f11), nil
}

func (x LPALCGETSTRING) PassValue() (ref C.LPALCGETSTRING, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETSTRING62F45F11Func == nil {
		lPALCGETSTRING62F45F11Func = x
	}
	return (C.LPALCGETSTRING)(C.LPALCGETSTRING_62f45f11), nil
}

func NewLPALCGETSTRINGRef(ref unsafe.Pointer) *LPALCGETSTRING {
	return (*LPALCGETSTRING)(ref)
}

//export lPALCGETSTRING62F45F11
func lPALCGETSTRING62F45F11(cdevice *C.ALCdevice, cparam C.ALCenum) *C.ALCchar {
	if lPALCGETSTRING62F45F11Func != nil {
		var device62f45f11 []ALCdevice
		hxfa897de := (*sliceHeader)(unsafe.Pointer(&device62f45f11))
		hxfa897de.Data = unsafe.Pointer(cdevice)
		hxfa897de.Cap = 0x7fffffff
		// hxfa897de.Len = ?

		param62f45f11 := (ALCenum)(cparam)
		ret62f45f11 := lPALCGETSTRING62F45F11Func(device62f45f11, param62f45f11)

		var uselessArray []ALCchar
		uselessArray[0] = *ret62f45f11

		ret, _ := unpackArgSALCchar(uselessArray)
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCGETSTRING62F45F11Func LPALCGETSTRING

func (x LPALCGETINTEGERV) PassRef() (ref *C.LPALCGETINTEGERV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETINTEGERVA0A1AFF2Func == nil {
		lPALCGETINTEGERVA0A1AFF2Func = x
	}
	return (*C.LPALCGETINTEGERV)(C.LPALCGETINTEGERV_a0a1aff2), nil
}

func (x LPALCGETINTEGERV) PassValue() (ref C.LPALCGETINTEGERV, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCGETINTEGERVA0A1AFF2Func == nil {
		lPALCGETINTEGERVA0A1AFF2Func = x
	}
	return (C.LPALCGETINTEGERV)(C.LPALCGETINTEGERV_a0a1aff2), nil
}

func NewLPALCGETINTEGERVRef(ref unsafe.Pointer) *LPALCGETINTEGERV {
	return (*LPALCGETINTEGERV)(ref)
}

//export lPALCGETINTEGERVA0A1AFF2
func lPALCGETINTEGERVA0A1AFF2(cdevice *C.ALCdevice, cparam C.ALCenum, csize C.ALCsizei, cvalues *C.ALCint) {
	if lPALCGETINTEGERVA0A1AFF2Func != nil {
		var devicea0a1aff2 []ALCdevice
		hxfe33f90 := (*sliceHeader)(unsafe.Pointer(&devicea0a1aff2))
		hxfe33f90.Data = unsafe.Pointer(cdevice)
		hxfe33f90.Cap = 0x7fffffff
		// hxfe33f90.Len = ?

		parama0a1aff2 := (ALCenum)(cparam)
		sizea0a1aff2 := (ALCsizei)(csize)
		var valuesa0a1aff2 []ALCint
		hxf08bba9 := (*sliceHeader)(unsafe.Pointer(&valuesa0a1aff2))
		hxf08bba9.Data = unsafe.Pointer(cvalues)
		hxf08bba9.Cap = 0x7fffffff
		// hxf08bba9.Len = ?

		lPALCGETINTEGERVA0A1AFF2Func(devicea0a1aff2, parama0a1aff2, sizea0a1aff2, valuesa0a1aff2)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALCGETINTEGERVA0A1AFF2Func LPALCGETINTEGERV

func (x LPALCCAPTUREOPENDEVICE) PassRef() (ref *C.LPALCCAPTUREOPENDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTUREOPENDEVICEE864B189Func == nil {
		lPALCCAPTUREOPENDEVICEE864B189Func = x
	}
	return (*C.LPALCCAPTUREOPENDEVICE)(C.LPALCCAPTUREOPENDEVICE_e864b189), nil
}

func (x LPALCCAPTUREOPENDEVICE) PassValue() (ref C.LPALCCAPTUREOPENDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTUREOPENDEVICEE864B189Func == nil {
		lPALCCAPTUREOPENDEVICEE864B189Func = x
	}
	return (C.LPALCCAPTUREOPENDEVICE)(C.LPALCCAPTUREOPENDEVICE_e864b189), nil
}

func NewLPALCCAPTUREOPENDEVICERef(ref unsafe.Pointer) *LPALCCAPTUREOPENDEVICE {
	return (*LPALCCAPTUREOPENDEVICE)(ref)
}

//export lPALCCAPTUREOPENDEVICEE864B189
func lPALCCAPTUREOPENDEVICEE864B189(cdevicename *C.ALCchar, cfrequency C.ALCuint, cformat C.ALCenum, cbuffersize C.ALCsizei) *C.ALCdevice {
	if lPALCCAPTUREOPENDEVICEE864B189Func != nil {
		var devicenamee864b189 []ALCchar
		packSALCchar(devicenamee864b189, cdevicename)
		frequencye864b189 := (ALCuint)(cfrequency)
		formate864b189 := (ALCenum)(cformat)
		buffersizee864b189 := (ALCsizei)(cbuffersize)
		rete864b189 := lPALCCAPTUREOPENDEVICEE864B189Func(devicenamee864b189, frequencye864b189, formate864b189, buffersizee864b189)
		ret, _ := (*C.ALCdevice)(unsafe.Pointer((*sliceHeader)(unsafe.Pointer(&rete864b189)).Data)), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCCAPTUREOPENDEVICEE864B189Func LPALCCAPTUREOPENDEVICE

func (x LPALCCAPTURECLOSEDEVICE) PassRef() (ref *C.LPALCCAPTURECLOSEDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTURECLOSEDEVICE1CFC08B8Func == nil {
		lPALCCAPTURECLOSEDEVICE1CFC08B8Func = x
	}
	return (*C.LPALCCAPTURECLOSEDEVICE)(C.LPALCCAPTURECLOSEDEVICE_1cfc08b8), nil
}

func (x LPALCCAPTURECLOSEDEVICE) PassValue() (ref C.LPALCCAPTURECLOSEDEVICE, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTURECLOSEDEVICE1CFC08B8Func == nil {
		lPALCCAPTURECLOSEDEVICE1CFC08B8Func = x
	}
	return (C.LPALCCAPTURECLOSEDEVICE)(C.LPALCCAPTURECLOSEDEVICE_1cfc08b8), nil
}

func NewLPALCCAPTURECLOSEDEVICERef(ref unsafe.Pointer) *LPALCCAPTURECLOSEDEVICE {
	return (*LPALCCAPTURECLOSEDEVICE)(ref)
}

//export lPALCCAPTURECLOSEDEVICE1CFC08B8
func lPALCCAPTURECLOSEDEVICE1CFC08B8(cdevice *C.ALCdevice) C.ALCboolean {
	if lPALCCAPTURECLOSEDEVICE1CFC08B8Func != nil {
		var device1cfc08b8 []ALCdevice
		hxfd3aa9c := (*sliceHeader)(unsafe.Pointer(&device1cfc08b8))
		hxfd3aa9c.Data = unsafe.Pointer(cdevice)
		hxfd3aa9c.Cap = 0x7fffffff
		// hxfd3aa9c.Len = ?

		ret1cfc08b8 := lPALCCAPTURECLOSEDEVICE1CFC08B8Func(device1cfc08b8)
		ret, _ := (C.ALCboolean)(ret1cfc08b8), cgoAllocsUnknown
		return ret
	}
	panic("callback func has not been set (race?)")
}

var lPALCCAPTURECLOSEDEVICE1CFC08B8Func LPALCCAPTURECLOSEDEVICE

func (x LPALCCAPTURESTART) PassRef() (ref *C.LPALCCAPTURESTART, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTURESTART4F64C48CFunc == nil {
		lPALCCAPTURESTART4F64C48CFunc = x
	}
	return (*C.LPALCCAPTURESTART)(C.LPALCCAPTURESTART_4f64c48c), nil
}

func (x LPALCCAPTURESTART) PassValue() (ref C.LPALCCAPTURESTART, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTURESTART4F64C48CFunc == nil {
		lPALCCAPTURESTART4F64C48CFunc = x
	}
	return (C.LPALCCAPTURESTART)(C.LPALCCAPTURESTART_4f64c48c), nil
}

func NewLPALCCAPTURESTARTRef(ref unsafe.Pointer) *LPALCCAPTURESTART {
	return (*LPALCCAPTURESTART)(ref)
}

//export lPALCCAPTURESTART4F64C48C
func lPALCCAPTURESTART4F64C48C(cdevice *C.ALCdevice) {
	if lPALCCAPTURESTART4F64C48CFunc != nil {
		var device4f64c48c []ALCdevice
		hxfb2f596 := (*sliceHeader)(unsafe.Pointer(&device4f64c48c))
		hxfb2f596.Data = unsafe.Pointer(cdevice)
		hxfb2f596.Cap = 0x7fffffff
		// hxfb2f596.Len = ?

		lPALCCAPTURESTART4F64C48CFunc(device4f64c48c)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALCCAPTURESTART4F64C48CFunc LPALCCAPTURESTART

func (x LPALCCAPTURESTOP) PassRef() (ref *C.LPALCCAPTURESTOP, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTURESTOPC4D1E273Func == nil {
		lPALCCAPTURESTOPC4D1E273Func = x
	}
	return (*C.LPALCCAPTURESTOP)(C.LPALCCAPTURESTOP_c4d1e273), nil
}

func (x LPALCCAPTURESTOP) PassValue() (ref C.LPALCCAPTURESTOP, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTURESTOPC4D1E273Func == nil {
		lPALCCAPTURESTOPC4D1E273Func = x
	}
	return (C.LPALCCAPTURESTOP)(C.LPALCCAPTURESTOP_c4d1e273), nil
}

func NewLPALCCAPTURESTOPRef(ref unsafe.Pointer) *LPALCCAPTURESTOP {
	return (*LPALCCAPTURESTOP)(ref)
}

//export lPALCCAPTURESTOPC4D1E273
func lPALCCAPTURESTOPC4D1E273(cdevice *C.ALCdevice) {
	if lPALCCAPTURESTOPC4D1E273Func != nil {
		var devicec4d1e273 []ALCdevice
		hxf11683e := (*sliceHeader)(unsafe.Pointer(&devicec4d1e273))
		hxf11683e.Data = unsafe.Pointer(cdevice)
		hxf11683e.Cap = 0x7fffffff
		// hxf11683e.Len = ?

		lPALCCAPTURESTOPC4D1E273Func(devicec4d1e273)
		return
	}
	panic("callback func has not been set (race?)")
}

var lPALCCAPTURESTOPC4D1E273Func LPALCCAPTURESTOP

func (x LPALCCAPTURESAMPLES) PassRef() (ref *C.LPALCCAPTURESAMPLES, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTURESAMPLES1B5D7311Func == nil {
		lPALCCAPTURESAMPLES1B5D7311Func = x
	}
	return (*C.LPALCCAPTURESAMPLES)(C.LPALCCAPTURESAMPLES_1b5d7311), nil
}

func (x LPALCCAPTURESAMPLES) PassValue() (ref C.LPALCCAPTURESAMPLES, allocs *cgoAllocMap) {
	if x == nil {
		return nil, nil
	}
	if lPALCCAPTURESAMPLES1B5D7311Func == nil {
		lPALCCAPTURESAMPLES1B5D7311Func = x
	}
	return (C.LPALCCAPTURESAMPLES)(C.LPALCCAPTURESAMPLES_1b5d7311), nil
}

func NewLPALCCAPTURESAMPLESRef(ref unsafe.Pointer) *LPALCCAPTURESAMPLES {
	return (*LPALCCAPTURESAMPLES)(ref)
}

//export lPALCCAPTURESAMPLES1B5D7311
// func lPALCCAPTURESAMPLES1B5D7311(cdevice *C.ALCdevice, cbuffer C.ALCvoid, csamples C.ALCsizei) {
// 	if lPALCCAPTURESAMPLES1B5D7311Func != nil {
// 		var device1b5d7311 []ALCdevice
// 		hxfd9261b := (*sliceHeader)(unsafe.Pointer(&device1b5d7311))
// 		hxfd9261b.Data = unsafe.Pointer(cdevice)
// 		hxfd9261b.Cap = 0x7fffffff
// 		// hxfd9261b.Len = ?

// 		buffer1b5d7311 := (*ALCvoid)(unsafe.Pointer(cbuffer))
// 		samples1b5d7311 := (ALCsizei)(csamples)
// 		lPALCCAPTURESAMPLES1B5D7311Func(device1b5d7311, buffer1b5d7311, samples1b5d7311)
// 		return
// 	}
// 	panic("callback func has not been set (race?)")
// }

var lPALCCAPTURESAMPLES1B5D7311Func LPALCCAPTURESAMPLES

// packPALcharString creates a Go string backed by *C.ALchar and avoids copying.
func packPALcharString(p *C.ALchar) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.ALchar)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}

type stringHeader struct {
	Data unsafe.Pointer
	Len  int
}

// RawString reperesents a string backed by data on the C side.
type RawString string

// Copy returns a Go-managed copy of raw string.
func (raw RawString) Copy() string {
	if len(raw) == 0 {
		return ""
	}
	h := (*stringHeader)(unsafe.Pointer(&raw))
	return C.GoStringN((*C.char)(h.Data), C.int(h.Len))
}

// packPALCcharString creates a Go string backed by *C.ALCchar and avoids copying.
func packPALCcharString(p *C.ALCchar) (raw string) {
	if p != nil && *p != 0 {
		h := (*stringHeader)(unsafe.Pointer(&raw))
		h.Data = unsafe.Pointer(p)
		for *p != 0 {
			p = (*C.ALCchar)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + 1)) // p++
		}
		h.Len = int(uintptr(unsafe.Pointer(p)) - uintptr(h.Data))
	}
	return
}
